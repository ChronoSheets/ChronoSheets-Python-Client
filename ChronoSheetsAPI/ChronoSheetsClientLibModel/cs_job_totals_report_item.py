# coding: utf-8

"""
    The ChronoSheets API

    <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  </p>  <p>      First Steps:       <ol>          <li>Make sure you've <a href='/HomeV2/App/sign-up'>signed up to ChronoSheets</a> to get yourself a user account</li>          <li>Confirm your account by following the link sent to your email address.  This will activate your account</li>          <li>Use your username and password to obtain an Auth Token by using the DoLogin method inside the UserProfile section below.  Use the Auth Token as an argument to the other methods</li>          <li>Try different methods in the API Playground to learn about the API</li>          <li>If you're stuck, try the full getting started guide on the <a href='/Home/ApiDocs'>API Toolkit</a> page.</li>      </ol>  </p>  <p>      Further Steps:       <ul>          <li>Create a mobile app (iOS, Android or Windows) using one of the ChronoSheets Mobile SDKs</li>          <li>Create a custom integration with your app using one of the ChronoSheets API Client Libraries.</li>      </ul>      Read more about the API Toolkit on the <a href='/Home/ApiDocs'>API Toolkit</a> page.  </p></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CSJobTotalsReportItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organisation_id': 'int',
        'job_id': 'int',
        'job_code': 'str',
        'client_id': 'int',
        'client_name': 'str',
        'project_id': 'int',
        'project_name': 'str',
        'span_seconds': 'int'
    }

    attribute_map = {
        'organisation_id': 'OrganisationId',
        'job_id': 'JobId',
        'job_code': 'JobCode',
        'client_id': 'ClientId',
        'client_name': 'ClientName',
        'project_id': 'ProjectId',
        'project_name': 'ProjectName',
        'span_seconds': 'SpanSeconds'
    }

    def __init__(self, organisation_id=None, job_id=None, job_code=None, client_id=None, client_name=None, project_id=None, project_name=None, span_seconds=None):  # noqa: E501
        """CSJobTotalsReportItem - a model defined in Swagger"""  # noqa: E501

        self._organisation_id = None
        self._job_id = None
        self._job_code = None
        self._client_id = None
        self._client_name = None
        self._project_id = None
        self._project_name = None
        self._span_seconds = None
        self.discriminator = None

        if organisation_id is not None:
            self.organisation_id = organisation_id
        if job_id is not None:
            self.job_id = job_id
        if job_code is not None:
            self.job_code = job_code
        if client_id is not None:
            self.client_id = client_id
        if client_name is not None:
            self.client_name = client_name
        if project_id is not None:
            self.project_id = project_id
        if project_name is not None:
            self.project_name = project_name
        if span_seconds is not None:
            self.span_seconds = span_seconds

    @property
    def organisation_id(self):
        """Gets the organisation_id of this CSJobTotalsReportItem.  # noqa: E501


        :return: The organisation_id of this CSJobTotalsReportItem.  # noqa: E501
        :rtype: int
        """
        return self._organisation_id

    @organisation_id.setter
    def organisation_id(self, organisation_id):
        """Sets the organisation_id of this CSJobTotalsReportItem.


        :param organisation_id: The organisation_id of this CSJobTotalsReportItem.  # noqa: E501
        :type: int
        """

        self._organisation_id = organisation_id

    @property
    def job_id(self):
        """Gets the job_id of this CSJobTotalsReportItem.  # noqa: E501


        :return: The job_id of this CSJobTotalsReportItem.  # noqa: E501
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this CSJobTotalsReportItem.


        :param job_id: The job_id of this CSJobTotalsReportItem.  # noqa: E501
        :type: int
        """

        self._job_id = job_id

    @property
    def job_code(self):
        """Gets the job_code of this CSJobTotalsReportItem.  # noqa: E501


        :return: The job_code of this CSJobTotalsReportItem.  # noqa: E501
        :rtype: str
        """
        return self._job_code

    @job_code.setter
    def job_code(self, job_code):
        """Sets the job_code of this CSJobTotalsReportItem.


        :param job_code: The job_code of this CSJobTotalsReportItem.  # noqa: E501
        :type: str
        """

        self._job_code = job_code

    @property
    def client_id(self):
        """Gets the client_id of this CSJobTotalsReportItem.  # noqa: E501


        :return: The client_id of this CSJobTotalsReportItem.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this CSJobTotalsReportItem.


        :param client_id: The client_id of this CSJobTotalsReportItem.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def client_name(self):
        """Gets the client_name of this CSJobTotalsReportItem.  # noqa: E501


        :return: The client_name of this CSJobTotalsReportItem.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this CSJobTotalsReportItem.


        :param client_name: The client_name of this CSJobTotalsReportItem.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def project_id(self):
        """Gets the project_id of this CSJobTotalsReportItem.  # noqa: E501


        :return: The project_id of this CSJobTotalsReportItem.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this CSJobTotalsReportItem.


        :param project_id: The project_id of this CSJobTotalsReportItem.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def project_name(self):
        """Gets the project_name of this CSJobTotalsReportItem.  # noqa: E501


        :return: The project_name of this CSJobTotalsReportItem.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this CSJobTotalsReportItem.


        :param project_name: The project_name of this CSJobTotalsReportItem.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def span_seconds(self):
        """Gets the span_seconds of this CSJobTotalsReportItem.  # noqa: E501


        :return: The span_seconds of this CSJobTotalsReportItem.  # noqa: E501
        :rtype: int
        """
        return self._span_seconds

    @span_seconds.setter
    def span_seconds(self, span_seconds):
        """Sets the span_seconds of this CSJobTotalsReportItem.


        :param span_seconds: The span_seconds of this CSJobTotalsReportItem.  # noqa: E501
        :type: int
        """

        self._span_seconds = span_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CSJobTotalsReportItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
