# coding: utf-8

"""
    The ChronoSheets API

    <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CSInsertTaskRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_name': 'str',
        'trip_enabled': 'bool'
    }

    attribute_map = {
        'task_name': 'TaskName',
        'trip_enabled': 'TripEnabled'
    }

    def __init__(self, task_name=None, trip_enabled=None):  # noqa: E501
        """CSInsertTaskRequest - a model defined in Swagger"""  # noqa: E501

        self._task_name = None
        self._trip_enabled = None
        self.discriminator = None

        if task_name is not None:
            self.task_name = task_name
        if trip_enabled is not None:
            self.trip_enabled = trip_enabled

    @property
    def task_name(self):
        """Gets the task_name of this CSInsertTaskRequest.  # noqa: E501

        The name of the Task.  Used to identify the Task when the user is selecting from a list of available Tasks  # noqa: E501

        :return: The task_name of this CSInsertTaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """Sets the task_name of this CSInsertTaskRequest.

        The name of the Task.  Used to identify the Task when the user is selecting from a list of available Tasks  # noqa: E501

        :param task_name: The task_name of this CSInsertTaskRequest.  # noqa: E501
        :type: str
        """

        self._task_name = task_name

    @property
    def trip_enabled(self):
        """Gets the trip_enabled of this CSInsertTaskRequest.  # noqa: E501

        Whether or not GPS Trip Tracking is enabled on this Task.  GPS Trip tracking is available on the iOS and Android apps.  If it's enabled an additional dialog is shown to the user after Task selection that allows the User to choose if they want to record the GPS data  # noqa: E501

        :return: The trip_enabled of this CSInsertTaskRequest.  # noqa: E501
        :rtype: bool
        """
        return self._trip_enabled

    @trip_enabled.setter
    def trip_enabled(self, trip_enabled):
        """Sets the trip_enabled of this CSInsertTaskRequest.

        Whether or not GPS Trip Tracking is enabled on this Task.  GPS Trip tracking is available on the iOS and Android apps.  If it's enabled an additional dialog is shown to the user after Task selection that allows the User to choose if they want to record the GPS data  # noqa: E501

        :param trip_enabled: The trip_enabled of this CSInsertTaskRequest.  # noqa: E501
        :type: bool
        """

        self._trip_enabled = trip_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CSInsertTaskRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
