# coding: utf-8

"""
    ChronoSheets API

    <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ChronoSheetsAPI.configuration import Configuration


class AggregateClient(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'client_projects': 'list[AggregateProject]',
        'id': 'int',
        'organisation_id': 'int',
        'client_name': 'str',
        'client_address_line1': 'str',
        'client_address_line2': 'str',
        'client_suburb': 'str',
        'client_state': 'str',
        'client_post_code': 'str',
        'person_of_contact': 'str',
        'client_phone_number': 'str',
        'client_mobile_number': 'str',
        'client_email_address': 'str',
        'client_web_url': 'str',
        'project_count': 'int'
    }

    attribute_map = {
        'client_projects': 'ClientProjects',
        'id': 'Id',
        'organisation_id': 'OrganisationId',
        'client_name': 'ClientName',
        'client_address_line1': 'ClientAddressLine1',
        'client_address_line2': 'ClientAddressLine2',
        'client_suburb': 'ClientSuburb',
        'client_state': 'ClientState',
        'client_post_code': 'ClientPostCode',
        'person_of_contact': 'PersonOfContact',
        'client_phone_number': 'ClientPhoneNumber',
        'client_mobile_number': 'ClientMobileNumber',
        'client_email_address': 'ClientEmailAddress',
        'client_web_url': 'ClientWebURL',
        'project_count': 'ProjectCount'
    }

    def __init__(self, client_projects=None, id=None, organisation_id=None, client_name=None, client_address_line1=None, client_address_line2=None, client_suburb=None, client_state=None, client_post_code=None, person_of_contact=None, client_phone_number=None, client_mobile_number=None, client_email_address=None, client_web_url=None, project_count=None, local_vars_configuration=None):  # noqa: E501
        """AggregateClient - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._client_projects = None
        self._id = None
        self._organisation_id = None
        self._client_name = None
        self._client_address_line1 = None
        self._client_address_line2 = None
        self._client_suburb = None
        self._client_state = None
        self._client_post_code = None
        self._person_of_contact = None
        self._client_phone_number = None
        self._client_mobile_number = None
        self._client_email_address = None
        self._client_web_url = None
        self._project_count = None
        self.discriminator = None

        if client_projects is not None:
            self.client_projects = client_projects
        if id is not None:
            self.id = id
        if organisation_id is not None:
            self.organisation_id = organisation_id
        if client_name is not None:
            self.client_name = client_name
        if client_address_line1 is not None:
            self.client_address_line1 = client_address_line1
        if client_address_line2 is not None:
            self.client_address_line2 = client_address_line2
        if client_suburb is not None:
            self.client_suburb = client_suburb
        if client_state is not None:
            self.client_state = client_state
        if client_post_code is not None:
            self.client_post_code = client_post_code
        if person_of_contact is not None:
            self.person_of_contact = person_of_contact
        if client_phone_number is not None:
            self.client_phone_number = client_phone_number
        if client_mobile_number is not None:
            self.client_mobile_number = client_mobile_number
        if client_email_address is not None:
            self.client_email_address = client_email_address
        if client_web_url is not None:
            self.client_web_url = client_web_url
        if project_count is not None:
            self.project_count = project_count

    @property
    def client_projects(self):
        """Gets the client_projects of this AggregateClient.  # noqa: E501

        A list of projects that are under this client  # noqa: E501

        :return: The client_projects of this AggregateClient.  # noqa: E501
        :rtype: list[AggregateProject]
        """
        return self._client_projects

    @client_projects.setter
    def client_projects(self, client_projects):
        """Sets the client_projects of this AggregateClient.

        A list of projects that are under this client  # noqa: E501

        :param client_projects: The client_projects of this AggregateClient.  # noqa: E501
        :type: list[AggregateProject]
        """

        self._client_projects = client_projects

    @property
    def id(self):
        """Gets the id of this AggregateClient.  # noqa: E501

        The ID of the client  # noqa: E501

        :return: The id of this AggregateClient.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AggregateClient.

        The ID of the client  # noqa: E501

        :param id: The id of this AggregateClient.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def organisation_id(self):
        """Gets the organisation_id of this AggregateClient.  # noqa: E501

        The ID of your organisation  # noqa: E501

        :return: The organisation_id of this AggregateClient.  # noqa: E501
        :rtype: int
        """
        return self._organisation_id

    @organisation_id.setter
    def organisation_id(self, organisation_id):
        """Sets the organisation_id of this AggregateClient.

        The ID of your organisation  # noqa: E501

        :param organisation_id: The organisation_id of this AggregateClient.  # noqa: E501
        :type: int
        """

        self._organisation_id = organisation_id

    @property
    def client_name(self):
        """Gets the client_name of this AggregateClient.  # noqa: E501

        The name of the client  # noqa: E501

        :return: The client_name of this AggregateClient.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this AggregateClient.

        The name of the client  # noqa: E501

        :param client_name: The client_name of this AggregateClient.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def client_address_line1(self):
        """Gets the client_address_line1 of this AggregateClient.  # noqa: E501

        The address line 1 of the client  # noqa: E501

        :return: The client_address_line1 of this AggregateClient.  # noqa: E501
        :rtype: str
        """
        return self._client_address_line1

    @client_address_line1.setter
    def client_address_line1(self, client_address_line1):
        """Sets the client_address_line1 of this AggregateClient.

        The address line 1 of the client  # noqa: E501

        :param client_address_line1: The client_address_line1 of this AggregateClient.  # noqa: E501
        :type: str
        """

        self._client_address_line1 = client_address_line1

    @property
    def client_address_line2(self):
        """Gets the client_address_line2 of this AggregateClient.  # noqa: E501

        The address line 2 of the client  # noqa: E501

        :return: The client_address_line2 of this AggregateClient.  # noqa: E501
        :rtype: str
        """
        return self._client_address_line2

    @client_address_line2.setter
    def client_address_line2(self, client_address_line2):
        """Sets the client_address_line2 of this AggregateClient.

        The address line 2 of the client  # noqa: E501

        :param client_address_line2: The client_address_line2 of this AggregateClient.  # noqa: E501
        :type: str
        """

        self._client_address_line2 = client_address_line2

    @property
    def client_suburb(self):
        """Gets the client_suburb of this AggregateClient.  # noqa: E501

        The address suburb of the client  # noqa: E501

        :return: The client_suburb of this AggregateClient.  # noqa: E501
        :rtype: str
        """
        return self._client_suburb

    @client_suburb.setter
    def client_suburb(self, client_suburb):
        """Sets the client_suburb of this AggregateClient.

        The address suburb of the client  # noqa: E501

        :param client_suburb: The client_suburb of this AggregateClient.  # noqa: E501
        :type: str
        """

        self._client_suburb = client_suburb

    @property
    def client_state(self):
        """Gets the client_state of this AggregateClient.  # noqa: E501

        The address state of the client  # noqa: E501

        :return: The client_state of this AggregateClient.  # noqa: E501
        :rtype: str
        """
        return self._client_state

    @client_state.setter
    def client_state(self, client_state):
        """Sets the client_state of this AggregateClient.

        The address state of the client  # noqa: E501

        :param client_state: The client_state of this AggregateClient.  # noqa: E501
        :type: str
        """

        self._client_state = client_state

    @property
    def client_post_code(self):
        """Gets the client_post_code of this AggregateClient.  # noqa: E501

        The postcode of the client  # noqa: E501

        :return: The client_post_code of this AggregateClient.  # noqa: E501
        :rtype: str
        """
        return self._client_post_code

    @client_post_code.setter
    def client_post_code(self, client_post_code):
        """Sets the client_post_code of this AggregateClient.

        The postcode of the client  # noqa: E501

        :param client_post_code: The client_post_code of this AggregateClient.  # noqa: E501
        :type: str
        """

        self._client_post_code = client_post_code

    @property
    def person_of_contact(self):
        """Gets the person_of_contact of this AggregateClient.  # noqa: E501

        The contact person working under the client  # noqa: E501

        :return: The person_of_contact of this AggregateClient.  # noqa: E501
        :rtype: str
        """
        return self._person_of_contact

    @person_of_contact.setter
    def person_of_contact(self, person_of_contact):
        """Sets the person_of_contact of this AggregateClient.

        The contact person working under the client  # noqa: E501

        :param person_of_contact: The person_of_contact of this AggregateClient.  # noqa: E501
        :type: str
        """

        self._person_of_contact = person_of_contact

    @property
    def client_phone_number(self):
        """Gets the client_phone_number of this AggregateClient.  # noqa: E501

        The phone number of the client  # noqa: E501

        :return: The client_phone_number of this AggregateClient.  # noqa: E501
        :rtype: str
        """
        return self._client_phone_number

    @client_phone_number.setter
    def client_phone_number(self, client_phone_number):
        """Sets the client_phone_number of this AggregateClient.

        The phone number of the client  # noqa: E501

        :param client_phone_number: The client_phone_number of this AggregateClient.  # noqa: E501
        :type: str
        """

        self._client_phone_number = client_phone_number

    @property
    def client_mobile_number(self):
        """Gets the client_mobile_number of this AggregateClient.  # noqa: E501

        The mobile phone number of the client  # noqa: E501

        :return: The client_mobile_number of this AggregateClient.  # noqa: E501
        :rtype: str
        """
        return self._client_mobile_number

    @client_mobile_number.setter
    def client_mobile_number(self, client_mobile_number):
        """Sets the client_mobile_number of this AggregateClient.

        The mobile phone number of the client  # noqa: E501

        :param client_mobile_number: The client_mobile_number of this AggregateClient.  # noqa: E501
        :type: str
        """

        self._client_mobile_number = client_mobile_number

    @property
    def client_email_address(self):
        """Gets the client_email_address of this AggregateClient.  # noqa: E501

        The email address of the client  # noqa: E501

        :return: The client_email_address of this AggregateClient.  # noqa: E501
        :rtype: str
        """
        return self._client_email_address

    @client_email_address.setter
    def client_email_address(self, client_email_address):
        """Sets the client_email_address of this AggregateClient.

        The email address of the client  # noqa: E501

        :param client_email_address: The client_email_address of this AggregateClient.  # noqa: E501
        :type: str
        """

        self._client_email_address = client_email_address

    @property
    def client_web_url(self):
        """Gets the client_web_url of this AggregateClient.  # noqa: E501

        The website URL of the client  # noqa: E501

        :return: The client_web_url of this AggregateClient.  # noqa: E501
        :rtype: str
        """
        return self._client_web_url

    @client_web_url.setter
    def client_web_url(self, client_web_url):
        """Sets the client_web_url of this AggregateClient.

        The website URL of the client  # noqa: E501

        :param client_web_url: The client_web_url of this AggregateClient.  # noqa: E501
        :type: str
        """

        self._client_web_url = client_web_url

    @property
    def project_count(self):
        """Gets the project_count of this AggregateClient.  # noqa: E501

        The number of projects under the client  # noqa: E501

        :return: The project_count of this AggregateClient.  # noqa: E501
        :rtype: int
        """
        return self._project_count

    @project_count.setter
    def project_count(self, project_count):
        """Sets the project_count of this AggregateClient.

        The number of projects under the client  # noqa: E501

        :param project_count: The project_count of this AggregateClient.  # noqa: E501
        :type: int
        """

        self._project_count = project_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AggregateClient):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AggregateClient):
            return True

        return self.to_dict() != other.to_dict()
