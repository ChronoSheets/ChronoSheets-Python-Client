# coding: utf-8

"""
    ChronoSheets API

    <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CSTimesheet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timesheet_id': 'int',
        'user_id': 'int',
        'job_id': 'int',
        'task_id': 'int',
        'start_date_time': 'datetime',
        'end_date_time': 'datetime',
        'description': 'str',
        'trip_id': 'int',
        'file_attachment_count': 'int',
        'pay_amount': 'float',
        'overtime_pay_amount': 'float',
        'includes_overtime': 'bool'
    }

    attribute_map = {
        'timesheet_id': 'TimesheetId',
        'user_id': 'UserId',
        'job_id': 'JobId',
        'task_id': 'TaskId',
        'start_date_time': 'StartDateTime',
        'end_date_time': 'EndDateTime',
        'description': 'Description',
        'trip_id': 'TripId',
        'file_attachment_count': 'FileAttachmentCount',
        'pay_amount': 'PayAmount',
        'overtime_pay_amount': 'OvertimePayAmount',
        'includes_overtime': 'IncludesOvertime'
    }

    def __init__(self, timesheet_id=None, user_id=None, job_id=None, task_id=None, start_date_time=None, end_date_time=None, description=None, trip_id=None, file_attachment_count=None, pay_amount=None, overtime_pay_amount=None, includes_overtime=None):  # noqa: E501
        """CSTimesheet - a model defined in Swagger"""  # noqa: E501

        self._timesheet_id = None
        self._user_id = None
        self._job_id = None
        self._task_id = None
        self._start_date_time = None
        self._end_date_time = None
        self._description = None
        self._trip_id = None
        self._file_attachment_count = None
        self._pay_amount = None
        self._overtime_pay_amount = None
        self._includes_overtime = None
        self.discriminator = None

        if timesheet_id is not None:
            self.timesheet_id = timesheet_id
        if user_id is not None:
            self.user_id = user_id
        if job_id is not None:
            self.job_id = job_id
        if task_id is not None:
            self.task_id = task_id
        if start_date_time is not None:
            self.start_date_time = start_date_time
        if end_date_time is not None:
            self.end_date_time = end_date_time
        if description is not None:
            self.description = description
        if trip_id is not None:
            self.trip_id = trip_id
        if file_attachment_count is not None:
            self.file_attachment_count = file_attachment_count
        if pay_amount is not None:
            self.pay_amount = pay_amount
        if overtime_pay_amount is not None:
            self.overtime_pay_amount = overtime_pay_amount
        if includes_overtime is not None:
            self.includes_overtime = includes_overtime

    @property
    def timesheet_id(self):
        """Gets the timesheet_id of this CSTimesheet.  # noqa: E501


        :return: The timesheet_id of this CSTimesheet.  # noqa: E501
        :rtype: int
        """
        return self._timesheet_id

    @timesheet_id.setter
    def timesheet_id(self, timesheet_id):
        """Sets the timesheet_id of this CSTimesheet.


        :param timesheet_id: The timesheet_id of this CSTimesheet.  # noqa: E501
        :type: int
        """

        self._timesheet_id = timesheet_id

    @property
    def user_id(self):
        """Gets the user_id of this CSTimesheet.  # noqa: E501


        :return: The user_id of this CSTimesheet.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CSTimesheet.


        :param user_id: The user_id of this CSTimesheet.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def job_id(self):
        """Gets the job_id of this CSTimesheet.  # noqa: E501


        :return: The job_id of this CSTimesheet.  # noqa: E501
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this CSTimesheet.


        :param job_id: The job_id of this CSTimesheet.  # noqa: E501
        :type: int
        """

        self._job_id = job_id

    @property
    def task_id(self):
        """Gets the task_id of this CSTimesheet.  # noqa: E501


        :return: The task_id of this CSTimesheet.  # noqa: E501
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this CSTimesheet.


        :param task_id: The task_id of this CSTimesheet.  # noqa: E501
        :type: int
        """

        self._task_id = task_id

    @property
    def start_date_time(self):
        """Gets the start_date_time of this CSTimesheet.  # noqa: E501


        :return: The start_date_time of this CSTimesheet.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this CSTimesheet.


        :param start_date_time: The start_date_time of this CSTimesheet.  # noqa: E501
        :type: datetime
        """

        self._start_date_time = start_date_time

    @property
    def end_date_time(self):
        """Gets the end_date_time of this CSTimesheet.  # noqa: E501


        :return: The end_date_time of this CSTimesheet.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this CSTimesheet.


        :param end_date_time: The end_date_time of this CSTimesheet.  # noqa: E501
        :type: datetime
        """

        self._end_date_time = end_date_time

    @property
    def description(self):
        """Gets the description of this CSTimesheet.  # noqa: E501


        :return: The description of this CSTimesheet.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CSTimesheet.


        :param description: The description of this CSTimesheet.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def trip_id(self):
        """Gets the trip_id of this CSTimesheet.  # noqa: E501


        :return: The trip_id of this CSTimesheet.  # noqa: E501
        :rtype: int
        """
        return self._trip_id

    @trip_id.setter
    def trip_id(self, trip_id):
        """Sets the trip_id of this CSTimesheet.


        :param trip_id: The trip_id of this CSTimesheet.  # noqa: E501
        :type: int
        """

        self._trip_id = trip_id

    @property
    def file_attachment_count(self):
        """Gets the file_attachment_count of this CSTimesheet.  # noqa: E501


        :return: The file_attachment_count of this CSTimesheet.  # noqa: E501
        :rtype: int
        """
        return self._file_attachment_count

    @file_attachment_count.setter
    def file_attachment_count(self, file_attachment_count):
        """Sets the file_attachment_count of this CSTimesheet.


        :param file_attachment_count: The file_attachment_count of this CSTimesheet.  # noqa: E501
        :type: int
        """

        self._file_attachment_count = file_attachment_count

    @property
    def pay_amount(self):
        """Gets the pay_amount of this CSTimesheet.  # noqa: E501


        :return: The pay_amount of this CSTimesheet.  # noqa: E501
        :rtype: float
        """
        return self._pay_amount

    @pay_amount.setter
    def pay_amount(self, pay_amount):
        """Sets the pay_amount of this CSTimesheet.


        :param pay_amount: The pay_amount of this CSTimesheet.  # noqa: E501
        :type: float
        """

        self._pay_amount = pay_amount

    @property
    def overtime_pay_amount(self):
        """Gets the overtime_pay_amount of this CSTimesheet.  # noqa: E501


        :return: The overtime_pay_amount of this CSTimesheet.  # noqa: E501
        :rtype: float
        """
        return self._overtime_pay_amount

    @overtime_pay_amount.setter
    def overtime_pay_amount(self, overtime_pay_amount):
        """Sets the overtime_pay_amount of this CSTimesheet.


        :param overtime_pay_amount: The overtime_pay_amount of this CSTimesheet.  # noqa: E501
        :type: float
        """

        self._overtime_pay_amount = overtime_pay_amount

    @property
    def includes_overtime(self):
        """Gets the includes_overtime of this CSTimesheet.  # noqa: E501


        :return: The includes_overtime of this CSTimesheet.  # noqa: E501
        :rtype: bool
        """
        return self._includes_overtime

    @includes_overtime.setter
    def includes_overtime(self, includes_overtime):
        """Sets the includes_overtime of this CSTimesheet.


        :param includes_overtime: The includes_overtime of this CSTimesheet.  # noqa: E501
        :type: bool
        """

        self._includes_overtime = includes_overtime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CSTimesheet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
