# coding: utf-8

"""
    The ChronoSheets API

    <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  </p>  <p>      First Steps:       <ol>          <li>Make sure you've <a href='/HomeV2/App/sign-up'>signed up to ChronoSheets</a> to get yourself a user account</li>          <li>Confirm your account by following the link sent to your email address.  This will activate your account</li>          <li>Use your username and password to obtain an Auth Token by using the DoLogin method inside the UserProfile section below.  Use the Auth Token as an argument to the other methods</li>          <li>Try different methods in the API Playground to learn about the API</li>          <li>If you're stuck, try the full getting started guide on the <a href='/Home/ApiDocs'>API Toolkit</a> page.</li>      </ol>  </p>  <p>      Further Steps:       <ul>          <li>Create a mobile app (iOS, Android or Windows) using one of the ChronoSheets Mobile SDKs</li>          <li>Create a custom integration with your app using one of the ChronoSheets API Client Libraries.</li>      </ul>      Read more about the API Toolkit on the <a href='/Home/ApiDocs'>API Toolkit</a> page.  </p></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CSClient(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'organisation_id': 'int',
        'client_name': 'str',
        'client_address_line1': 'str',
        'client_address_line2': 'str',
        'client_suburb': 'str',
        'client_state': 'str',
        'client_post_code': 'str',
        'person_of_contact': 'str',
        'client_phone_number': 'str',
        'client_mobile_number': 'str',
        'client_email_address': 'str',
        'client_web_url': 'str',
        'project_count': 'int'
    }

    attribute_map = {
        'id': 'Id',
        'organisation_id': 'OrganisationId',
        'client_name': 'ClientName',
        'client_address_line1': 'ClientAddressLine1',
        'client_address_line2': 'ClientAddressLine2',
        'client_suburb': 'ClientSuburb',
        'client_state': 'ClientState',
        'client_post_code': 'ClientPostCode',
        'person_of_contact': 'PersonOfContact',
        'client_phone_number': 'ClientPhoneNumber',
        'client_mobile_number': 'ClientMobileNumber',
        'client_email_address': 'ClientEmailAddress',
        'client_web_url': 'ClientWebURL',
        'project_count': 'ProjectCount'
    }

    def __init__(self, id=None, organisation_id=None, client_name=None, client_address_line1=None, client_address_line2=None, client_suburb=None, client_state=None, client_post_code=None, person_of_contact=None, client_phone_number=None, client_mobile_number=None, client_email_address=None, client_web_url=None, project_count=None):  # noqa: E501
        """CSClient - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._organisation_id = None
        self._client_name = None
        self._client_address_line1 = None
        self._client_address_line2 = None
        self._client_suburb = None
        self._client_state = None
        self._client_post_code = None
        self._person_of_contact = None
        self._client_phone_number = None
        self._client_mobile_number = None
        self._client_email_address = None
        self._client_web_url = None
        self._project_count = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if organisation_id is not None:
            self.organisation_id = organisation_id
        if client_name is not None:
            self.client_name = client_name
        if client_address_line1 is not None:
            self.client_address_line1 = client_address_line1
        if client_address_line2 is not None:
            self.client_address_line2 = client_address_line2
        if client_suburb is not None:
            self.client_suburb = client_suburb
        if client_state is not None:
            self.client_state = client_state
        if client_post_code is not None:
            self.client_post_code = client_post_code
        if person_of_contact is not None:
            self.person_of_contact = person_of_contact
        if client_phone_number is not None:
            self.client_phone_number = client_phone_number
        if client_mobile_number is not None:
            self.client_mobile_number = client_mobile_number
        if client_email_address is not None:
            self.client_email_address = client_email_address
        if client_web_url is not None:
            self.client_web_url = client_web_url
        if project_count is not None:
            self.project_count = project_count

    @property
    def id(self):
        """Gets the id of this CSClient.  # noqa: E501


        :return: The id of this CSClient.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CSClient.


        :param id: The id of this CSClient.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def organisation_id(self):
        """Gets the organisation_id of this CSClient.  # noqa: E501


        :return: The organisation_id of this CSClient.  # noqa: E501
        :rtype: int
        """
        return self._organisation_id

    @organisation_id.setter
    def organisation_id(self, organisation_id):
        """Sets the organisation_id of this CSClient.


        :param organisation_id: The organisation_id of this CSClient.  # noqa: E501
        :type: int
        """

        self._organisation_id = organisation_id

    @property
    def client_name(self):
        """Gets the client_name of this CSClient.  # noqa: E501


        :return: The client_name of this CSClient.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this CSClient.


        :param client_name: The client_name of this CSClient.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def client_address_line1(self):
        """Gets the client_address_line1 of this CSClient.  # noqa: E501


        :return: The client_address_line1 of this CSClient.  # noqa: E501
        :rtype: str
        """
        return self._client_address_line1

    @client_address_line1.setter
    def client_address_line1(self, client_address_line1):
        """Sets the client_address_line1 of this CSClient.


        :param client_address_line1: The client_address_line1 of this CSClient.  # noqa: E501
        :type: str
        """

        self._client_address_line1 = client_address_line1

    @property
    def client_address_line2(self):
        """Gets the client_address_line2 of this CSClient.  # noqa: E501


        :return: The client_address_line2 of this CSClient.  # noqa: E501
        :rtype: str
        """
        return self._client_address_line2

    @client_address_line2.setter
    def client_address_line2(self, client_address_line2):
        """Sets the client_address_line2 of this CSClient.


        :param client_address_line2: The client_address_line2 of this CSClient.  # noqa: E501
        :type: str
        """

        self._client_address_line2 = client_address_line2

    @property
    def client_suburb(self):
        """Gets the client_suburb of this CSClient.  # noqa: E501


        :return: The client_suburb of this CSClient.  # noqa: E501
        :rtype: str
        """
        return self._client_suburb

    @client_suburb.setter
    def client_suburb(self, client_suburb):
        """Sets the client_suburb of this CSClient.


        :param client_suburb: The client_suburb of this CSClient.  # noqa: E501
        :type: str
        """

        self._client_suburb = client_suburb

    @property
    def client_state(self):
        """Gets the client_state of this CSClient.  # noqa: E501


        :return: The client_state of this CSClient.  # noqa: E501
        :rtype: str
        """
        return self._client_state

    @client_state.setter
    def client_state(self, client_state):
        """Sets the client_state of this CSClient.


        :param client_state: The client_state of this CSClient.  # noqa: E501
        :type: str
        """

        self._client_state = client_state

    @property
    def client_post_code(self):
        """Gets the client_post_code of this CSClient.  # noqa: E501


        :return: The client_post_code of this CSClient.  # noqa: E501
        :rtype: str
        """
        return self._client_post_code

    @client_post_code.setter
    def client_post_code(self, client_post_code):
        """Sets the client_post_code of this CSClient.


        :param client_post_code: The client_post_code of this CSClient.  # noqa: E501
        :type: str
        """

        self._client_post_code = client_post_code

    @property
    def person_of_contact(self):
        """Gets the person_of_contact of this CSClient.  # noqa: E501


        :return: The person_of_contact of this CSClient.  # noqa: E501
        :rtype: str
        """
        return self._person_of_contact

    @person_of_contact.setter
    def person_of_contact(self, person_of_contact):
        """Sets the person_of_contact of this CSClient.


        :param person_of_contact: The person_of_contact of this CSClient.  # noqa: E501
        :type: str
        """

        self._person_of_contact = person_of_contact

    @property
    def client_phone_number(self):
        """Gets the client_phone_number of this CSClient.  # noqa: E501


        :return: The client_phone_number of this CSClient.  # noqa: E501
        :rtype: str
        """
        return self._client_phone_number

    @client_phone_number.setter
    def client_phone_number(self, client_phone_number):
        """Sets the client_phone_number of this CSClient.


        :param client_phone_number: The client_phone_number of this CSClient.  # noqa: E501
        :type: str
        """

        self._client_phone_number = client_phone_number

    @property
    def client_mobile_number(self):
        """Gets the client_mobile_number of this CSClient.  # noqa: E501


        :return: The client_mobile_number of this CSClient.  # noqa: E501
        :rtype: str
        """
        return self._client_mobile_number

    @client_mobile_number.setter
    def client_mobile_number(self, client_mobile_number):
        """Sets the client_mobile_number of this CSClient.


        :param client_mobile_number: The client_mobile_number of this CSClient.  # noqa: E501
        :type: str
        """

        self._client_mobile_number = client_mobile_number

    @property
    def client_email_address(self):
        """Gets the client_email_address of this CSClient.  # noqa: E501


        :return: The client_email_address of this CSClient.  # noqa: E501
        :rtype: str
        """
        return self._client_email_address

    @client_email_address.setter
    def client_email_address(self, client_email_address):
        """Sets the client_email_address of this CSClient.


        :param client_email_address: The client_email_address of this CSClient.  # noqa: E501
        :type: str
        """

        self._client_email_address = client_email_address

    @property
    def client_web_url(self):
        """Gets the client_web_url of this CSClient.  # noqa: E501


        :return: The client_web_url of this CSClient.  # noqa: E501
        :rtype: str
        """
        return self._client_web_url

    @client_web_url.setter
    def client_web_url(self, client_web_url):
        """Sets the client_web_url of this CSClient.


        :param client_web_url: The client_web_url of this CSClient.  # noqa: E501
        :type: str
        """

        self._client_web_url = client_web_url

    @property
    def project_count(self):
        """Gets the project_count of this CSClient.  # noqa: E501


        :return: The project_count of this CSClient.  # noqa: E501
        :rtype: int
        """
        return self._project_count

    @project_count.setter
    def project_count(self, project_count):
        """Sets the project_count of this CSClient.


        :param project_count: The project_count of this CSClient.  # noqa: E501
        :type: int
        """

        self._project_count = project_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CSClient):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
