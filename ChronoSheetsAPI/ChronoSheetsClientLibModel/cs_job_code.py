# coding: utf-8

"""
    The ChronoSheets API

    <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CSJobCode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'code': 'str',
        'client': 'str',
        'client_id': 'int',
        'project': 'str',
        'project_id': 'int',
        'organisation_id': 'int',
        'is_deleted': 'bool'
    }

    attribute_map = {
        'id': 'Id',
        'code': 'Code',
        'client': 'Client',
        'client_id': 'ClientId',
        'project': 'Project',
        'project_id': 'ProjectId',
        'organisation_id': 'OrganisationId',
        'is_deleted': 'IsDeleted'
    }

    def __init__(self, id=None, code=None, client=None, client_id=None, project=None, project_id=None, organisation_id=None, is_deleted=None):  # noqa: E501
        """CSJobCode - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._code = None
        self._client = None
        self._client_id = None
        self._project = None
        self._project_id = None
        self._organisation_id = None
        self._is_deleted = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if code is not None:
            self.code = code
        if client is not None:
            self.client = client
        if client_id is not None:
            self.client_id = client_id
        if project is not None:
            self.project = project
        if project_id is not None:
            self.project_id = project_id
        if organisation_id is not None:
            self.organisation_id = organisation_id
        if is_deleted is not None:
            self.is_deleted = is_deleted

    @property
    def id(self):
        """Gets the id of this CSJobCode.  # noqa: E501


        :return: The id of this CSJobCode.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CSJobCode.


        :param id: The id of this CSJobCode.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def code(self):
        """Gets the code of this CSJobCode.  # noqa: E501


        :return: The code of this CSJobCode.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CSJobCode.


        :param code: The code of this CSJobCode.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def client(self):
        """Gets the client of this CSJobCode.  # noqa: E501


        :return: The client of this CSJobCode.  # noqa: E501
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this CSJobCode.


        :param client: The client of this CSJobCode.  # noqa: E501
        :type: str
        """

        self._client = client

    @property
    def client_id(self):
        """Gets the client_id of this CSJobCode.  # noqa: E501


        :return: The client_id of this CSJobCode.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this CSJobCode.


        :param client_id: The client_id of this CSJobCode.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def project(self):
        """Gets the project of this CSJobCode.  # noqa: E501


        :return: The project of this CSJobCode.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this CSJobCode.


        :param project: The project of this CSJobCode.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def project_id(self):
        """Gets the project_id of this CSJobCode.  # noqa: E501


        :return: The project_id of this CSJobCode.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this CSJobCode.


        :param project_id: The project_id of this CSJobCode.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def organisation_id(self):
        """Gets the organisation_id of this CSJobCode.  # noqa: E501


        :return: The organisation_id of this CSJobCode.  # noqa: E501
        :rtype: int
        """
        return self._organisation_id

    @organisation_id.setter
    def organisation_id(self, organisation_id):
        """Sets the organisation_id of this CSJobCode.


        :param organisation_id: The organisation_id of this CSJobCode.  # noqa: E501
        :type: int
        """

        self._organisation_id = organisation_id

    @property
    def is_deleted(self):
        """Gets the is_deleted of this CSJobCode.  # noqa: E501


        :return: The is_deleted of this CSJobCode.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this CSJobCode.


        :param is_deleted: The is_deleted of this CSJobCode.  # noqa: E501
        :type: bool
        """

        self._is_deleted = is_deleted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CSJobCode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
