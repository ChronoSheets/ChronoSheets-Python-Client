# coding: utf-8

"""
    ChronoSheets API

    <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CSTranscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'org_id': 'int',
        'file_attachment_id': 'int',
        'created': 'datetime',
        'status': 'str',
        'media_type': 'str',
        'contents': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'org_id': 'OrgId',
        'file_attachment_id': 'FileAttachmentId',
        'created': 'Created',
        'status': 'Status',
        'media_type': 'MediaType',
        'contents': 'Contents'
    }

    def __init__(self, id=None, org_id=None, file_attachment_id=None, created=None, status=None, media_type=None, contents=None):  # noqa: E501
        """CSTranscription - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._org_id = None
        self._file_attachment_id = None
        self._created = None
        self._status = None
        self._media_type = None
        self._contents = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if org_id is not None:
            self.org_id = org_id
        if file_attachment_id is not None:
            self.file_attachment_id = file_attachment_id
        if created is not None:
            self.created = created
        if status is not None:
            self.status = status
        if media_type is not None:
            self.media_type = media_type
        if contents is not None:
            self.contents = contents

    @property
    def id(self):
        """Gets the id of this CSTranscription.  # noqa: E501


        :return: The id of this CSTranscription.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CSTranscription.


        :param id: The id of this CSTranscription.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def org_id(self):
        """Gets the org_id of this CSTranscription.  # noqa: E501


        :return: The org_id of this CSTranscription.  # noqa: E501
        :rtype: int
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this CSTranscription.


        :param org_id: The org_id of this CSTranscription.  # noqa: E501
        :type: int
        """

        self._org_id = org_id

    @property
    def file_attachment_id(self):
        """Gets the file_attachment_id of this CSTranscription.  # noqa: E501


        :return: The file_attachment_id of this CSTranscription.  # noqa: E501
        :rtype: int
        """
        return self._file_attachment_id

    @file_attachment_id.setter
    def file_attachment_id(self, file_attachment_id):
        """Sets the file_attachment_id of this CSTranscription.


        :param file_attachment_id: The file_attachment_id of this CSTranscription.  # noqa: E501
        :type: int
        """

        self._file_attachment_id = file_attachment_id

    @property
    def created(self):
        """Gets the created of this CSTranscription.  # noqa: E501


        :return: The created of this CSTranscription.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CSTranscription.


        :param created: The created of this CSTranscription.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def status(self):
        """Gets the status of this CSTranscription.  # noqa: E501


        :return: The status of this CSTranscription.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CSTranscription.


        :param status: The status of this CSTranscription.  # noqa: E501
        :type: str
        """
        allowed_values = ["Saved", "Processing", "Completed", "FailedWithError"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def media_type(self):
        """Gets the media_type of this CSTranscription.  # noqa: E501


        :return: The media_type of this CSTranscription.  # noqa: E501
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this CSTranscription.


        :param media_type: The media_type of this CSTranscription.  # noqa: E501
        :type: str
        """
        allowed_values = ["Other", "Mp3", "Mp4", "Wav", "Flac"]  # noqa: E501
        if media_type not in allowed_values:
            raise ValueError(
                "Invalid value for `media_type` ({0}), must be one of {1}"  # noqa: E501
                .format(media_type, allowed_values)
            )

        self._media_type = media_type

    @property
    def contents(self):
        """Gets the contents of this CSTranscription.  # noqa: E501


        :return: The contents of this CSTranscription.  # noqa: E501
        :rtype: str
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this CSTranscription.


        :param contents: The contents of this CSTranscription.  # noqa: E501
        :type: str
        """

        self._contents = contents

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CSTranscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
