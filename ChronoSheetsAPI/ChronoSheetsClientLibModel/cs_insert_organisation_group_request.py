# coding: utf-8

"""
    The ChronoSheets API

    <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CSInsertOrganisationGroupRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organisation_group_name': 'str',
        'organisation_group_user_ids': 'list[int]'
    }

    attribute_map = {
        'organisation_group_name': 'OrganisationGroupName',
        'organisation_group_user_ids': 'OrganisationGroupUserIds'
    }

    def __init__(self, organisation_group_name=None, organisation_group_user_ids=None):  # noqa: E501
        """CSInsertOrganisationGroupRequest - a model defined in Swagger"""  # noqa: E501

        self._organisation_group_name = None
        self._organisation_group_user_ids = None
        self.discriminator = None

        if organisation_group_name is not None:
            self.organisation_group_name = organisation_group_name
        if organisation_group_user_ids is not None:
            self.organisation_group_user_ids = organisation_group_user_ids

    @property
    def organisation_group_name(self):
        """Gets the organisation_group_name of this CSInsertOrganisationGroupRequest.  # noqa: E501

        The name of the new Organisation Group.  This is used when you're looking up Organisation Groups elsewhere through ChronoSheets  # noqa: E501

        :return: The organisation_group_name of this CSInsertOrganisationGroupRequest.  # noqa: E501
        :rtype: str
        """
        return self._organisation_group_name

    @organisation_group_name.setter
    def organisation_group_name(self, organisation_group_name):
        """Sets the organisation_group_name of this CSInsertOrganisationGroupRequest.

        The name of the new Organisation Group.  This is used when you're looking up Organisation Groups elsewhere through ChronoSheets  # noqa: E501

        :param organisation_group_name: The organisation_group_name of this CSInsertOrganisationGroupRequest.  # noqa: E501
        :type: str
        """

        self._organisation_group_name = organisation_group_name

    @property
    def organisation_group_user_ids(self):
        """Gets the organisation_group_user_ids of this CSInsertOrganisationGroupRequest.  # noqa: E501

        The Ids of the Users that are going to be in this Organisation Group  # noqa: E501

        :return: The organisation_group_user_ids of this CSInsertOrganisationGroupRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._organisation_group_user_ids

    @organisation_group_user_ids.setter
    def organisation_group_user_ids(self, organisation_group_user_ids):
        """Sets the organisation_group_user_ids of this CSInsertOrganisationGroupRequest.

        The Ids of the Users that are going to be in this Organisation Group  # noqa: E501

        :param organisation_group_user_ids: The organisation_group_user_ids of this CSInsertOrganisationGroupRequest.  # noqa: E501
        :type: list[int]
        """

        self._organisation_group_user_ids = organisation_group_user_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CSInsertOrganisationGroupRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
