# coding: utf-8

"""
    ChronoSheets API

    <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CSFleetSummaryReportItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_distance_meters_filtered': 'float',
        'total_distance_meters': 'float',
        'total_running_cost_dollars_filtered': 'float',
        'total_running_cost_dollars': 'float',
        'id': 'int',
        'organisation_id': 'int',
        'name': 'str',
        'cost_per_kilometer': 'float',
        'make': 'str',
        'model': 'str',
        'year': 'str',
        'licence_plate_number': 'str',
        'is_deleted': 'bool',
        'permitted_employees': 'list[int]'
    }

    attribute_map = {
        'total_distance_meters_filtered': 'TotalDistanceMetersFiltered',
        'total_distance_meters': 'TotalDistanceMeters',
        'total_running_cost_dollars_filtered': 'TotalRunningCostDollarsFiltered',
        'total_running_cost_dollars': 'TotalRunningCostDollars',
        'id': 'Id',
        'organisation_id': 'OrganisationId',
        'name': 'Name',
        'cost_per_kilometer': 'CostPerKilometer',
        'make': 'Make',
        'model': 'Model',
        'year': 'Year',
        'licence_plate_number': 'LicencePlateNumber',
        'is_deleted': 'IsDeleted',
        'permitted_employees': 'PermittedEmployees'
    }

    def __init__(self, total_distance_meters_filtered=None, total_distance_meters=None, total_running_cost_dollars_filtered=None, total_running_cost_dollars=None, id=None, organisation_id=None, name=None, cost_per_kilometer=None, make=None, model=None, year=None, licence_plate_number=None, is_deleted=None, permitted_employees=None):  # noqa: E501
        """CSFleetSummaryReportItem - a model defined in Swagger"""  # noqa: E501

        self._total_distance_meters_filtered = None
        self._total_distance_meters = None
        self._total_running_cost_dollars_filtered = None
        self._total_running_cost_dollars = None
        self._id = None
        self._organisation_id = None
        self._name = None
        self._cost_per_kilometer = None
        self._make = None
        self._model = None
        self._year = None
        self._licence_plate_number = None
        self._is_deleted = None
        self._permitted_employees = None
        self.discriminator = None

        if total_distance_meters_filtered is not None:
            self.total_distance_meters_filtered = total_distance_meters_filtered
        if total_distance_meters is not None:
            self.total_distance_meters = total_distance_meters
        if total_running_cost_dollars_filtered is not None:
            self.total_running_cost_dollars_filtered = total_running_cost_dollars_filtered
        if total_running_cost_dollars is not None:
            self.total_running_cost_dollars = total_running_cost_dollars
        if id is not None:
            self.id = id
        if organisation_id is not None:
            self.organisation_id = organisation_id
        if name is not None:
            self.name = name
        if cost_per_kilometer is not None:
            self.cost_per_kilometer = cost_per_kilometer
        if make is not None:
            self.make = make
        if model is not None:
            self.model = model
        if year is not None:
            self.year = year
        if licence_plate_number is not None:
            self.licence_plate_number = licence_plate_number
        if is_deleted is not None:
            self.is_deleted = is_deleted
        if permitted_employees is not None:
            self.permitted_employees = permitted_employees

    @property
    def total_distance_meters_filtered(self):
        """Gets the total_distance_meters_filtered of this CSFleetSummaryReportItem.  # noqa: E501


        :return: The total_distance_meters_filtered of this CSFleetSummaryReportItem.  # noqa: E501
        :rtype: float
        """
        return self._total_distance_meters_filtered

    @total_distance_meters_filtered.setter
    def total_distance_meters_filtered(self, total_distance_meters_filtered):
        """Sets the total_distance_meters_filtered of this CSFleetSummaryReportItem.


        :param total_distance_meters_filtered: The total_distance_meters_filtered of this CSFleetSummaryReportItem.  # noqa: E501
        :type: float
        """

        self._total_distance_meters_filtered = total_distance_meters_filtered

    @property
    def total_distance_meters(self):
        """Gets the total_distance_meters of this CSFleetSummaryReportItem.  # noqa: E501


        :return: The total_distance_meters of this CSFleetSummaryReportItem.  # noqa: E501
        :rtype: float
        """
        return self._total_distance_meters

    @total_distance_meters.setter
    def total_distance_meters(self, total_distance_meters):
        """Sets the total_distance_meters of this CSFleetSummaryReportItem.


        :param total_distance_meters: The total_distance_meters of this CSFleetSummaryReportItem.  # noqa: E501
        :type: float
        """

        self._total_distance_meters = total_distance_meters

    @property
    def total_running_cost_dollars_filtered(self):
        """Gets the total_running_cost_dollars_filtered of this CSFleetSummaryReportItem.  # noqa: E501


        :return: The total_running_cost_dollars_filtered of this CSFleetSummaryReportItem.  # noqa: E501
        :rtype: float
        """
        return self._total_running_cost_dollars_filtered

    @total_running_cost_dollars_filtered.setter
    def total_running_cost_dollars_filtered(self, total_running_cost_dollars_filtered):
        """Sets the total_running_cost_dollars_filtered of this CSFleetSummaryReportItem.


        :param total_running_cost_dollars_filtered: The total_running_cost_dollars_filtered of this CSFleetSummaryReportItem.  # noqa: E501
        :type: float
        """

        self._total_running_cost_dollars_filtered = total_running_cost_dollars_filtered

    @property
    def total_running_cost_dollars(self):
        """Gets the total_running_cost_dollars of this CSFleetSummaryReportItem.  # noqa: E501


        :return: The total_running_cost_dollars of this CSFleetSummaryReportItem.  # noqa: E501
        :rtype: float
        """
        return self._total_running_cost_dollars

    @total_running_cost_dollars.setter
    def total_running_cost_dollars(self, total_running_cost_dollars):
        """Sets the total_running_cost_dollars of this CSFleetSummaryReportItem.


        :param total_running_cost_dollars: The total_running_cost_dollars of this CSFleetSummaryReportItem.  # noqa: E501
        :type: float
        """

        self._total_running_cost_dollars = total_running_cost_dollars

    @property
    def id(self):
        """Gets the id of this CSFleetSummaryReportItem.  # noqa: E501


        :return: The id of this CSFleetSummaryReportItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CSFleetSummaryReportItem.


        :param id: The id of this CSFleetSummaryReportItem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def organisation_id(self):
        """Gets the organisation_id of this CSFleetSummaryReportItem.  # noqa: E501


        :return: The organisation_id of this CSFleetSummaryReportItem.  # noqa: E501
        :rtype: int
        """
        return self._organisation_id

    @organisation_id.setter
    def organisation_id(self, organisation_id):
        """Sets the organisation_id of this CSFleetSummaryReportItem.


        :param organisation_id: The organisation_id of this CSFleetSummaryReportItem.  # noqa: E501
        :type: int
        """

        self._organisation_id = organisation_id

    @property
    def name(self):
        """Gets the name of this CSFleetSummaryReportItem.  # noqa: E501


        :return: The name of this CSFleetSummaryReportItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CSFleetSummaryReportItem.


        :param name: The name of this CSFleetSummaryReportItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def cost_per_kilometer(self):
        """Gets the cost_per_kilometer of this CSFleetSummaryReportItem.  # noqa: E501


        :return: The cost_per_kilometer of this CSFleetSummaryReportItem.  # noqa: E501
        :rtype: float
        """
        return self._cost_per_kilometer

    @cost_per_kilometer.setter
    def cost_per_kilometer(self, cost_per_kilometer):
        """Sets the cost_per_kilometer of this CSFleetSummaryReportItem.


        :param cost_per_kilometer: The cost_per_kilometer of this CSFleetSummaryReportItem.  # noqa: E501
        :type: float
        """

        self._cost_per_kilometer = cost_per_kilometer

    @property
    def make(self):
        """Gets the make of this CSFleetSummaryReportItem.  # noqa: E501


        :return: The make of this CSFleetSummaryReportItem.  # noqa: E501
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this CSFleetSummaryReportItem.


        :param make: The make of this CSFleetSummaryReportItem.  # noqa: E501
        :type: str
        """

        self._make = make

    @property
    def model(self):
        """Gets the model of this CSFleetSummaryReportItem.  # noqa: E501


        :return: The model of this CSFleetSummaryReportItem.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this CSFleetSummaryReportItem.


        :param model: The model of this CSFleetSummaryReportItem.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def year(self):
        """Gets the year of this CSFleetSummaryReportItem.  # noqa: E501


        :return: The year of this CSFleetSummaryReportItem.  # noqa: E501
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this CSFleetSummaryReportItem.


        :param year: The year of this CSFleetSummaryReportItem.  # noqa: E501
        :type: str
        """

        self._year = year

    @property
    def licence_plate_number(self):
        """Gets the licence_plate_number of this CSFleetSummaryReportItem.  # noqa: E501


        :return: The licence_plate_number of this CSFleetSummaryReportItem.  # noqa: E501
        :rtype: str
        """
        return self._licence_plate_number

    @licence_plate_number.setter
    def licence_plate_number(self, licence_plate_number):
        """Sets the licence_plate_number of this CSFleetSummaryReportItem.


        :param licence_plate_number: The licence_plate_number of this CSFleetSummaryReportItem.  # noqa: E501
        :type: str
        """

        self._licence_plate_number = licence_plate_number

    @property
    def is_deleted(self):
        """Gets the is_deleted of this CSFleetSummaryReportItem.  # noqa: E501


        :return: The is_deleted of this CSFleetSummaryReportItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this CSFleetSummaryReportItem.


        :param is_deleted: The is_deleted of this CSFleetSummaryReportItem.  # noqa: E501
        :type: bool
        """

        self._is_deleted = is_deleted

    @property
    def permitted_employees(self):
        """Gets the permitted_employees of this CSFleetSummaryReportItem.  # noqa: E501


        :return: The permitted_employees of this CSFleetSummaryReportItem.  # noqa: E501
        :rtype: list[int]
        """
        return self._permitted_employees

    @permitted_employees.setter
    def permitted_employees(self, permitted_employees):
        """Sets the permitted_employees of this CSFleetSummaryReportItem.


        :param permitted_employees: The permitted_employees of this CSFleetSummaryReportItem.  # noqa: E501
        :type: list[int]
        """

        self._permitted_employees = permitted_employees

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CSFleetSummaryReportItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
