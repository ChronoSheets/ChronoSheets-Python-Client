# coding: utf-8

"""
    ChronoSheets API

    <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ChronoSheetsAPI.configuration import Configuration


class CombinedReportsData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'series_job_codes': 'list[JobSeriesReportItem]',
        'series_tasks': 'list[TaskSeriesReportItem]',
        'series_clients': 'list[ClientSeriesReportItem]',
        'series_projects': 'list[ProjectSeriesReportItem]',
        'totals_job_codes': 'list[JobTotalsReportItem]',
        'totals_tasks': 'list[TaskTotalsReportItem]',
        'totals_clients': 'list[ClientTotalsReportItem]',
        'totals_projects': 'list[ProjectTotalsReportItem]'
    }

    attribute_map = {
        'series_job_codes': 'SeriesJobCodes',
        'series_tasks': 'SeriesTasks',
        'series_clients': 'SeriesClients',
        'series_projects': 'SeriesProjects',
        'totals_job_codes': 'TotalsJobCodes',
        'totals_tasks': 'TotalsTasks',
        'totals_clients': 'TotalsClients',
        'totals_projects': 'TotalsProjects'
    }

    def __init__(self, series_job_codes=None, series_tasks=None, series_clients=None, series_projects=None, totals_job_codes=None, totals_tasks=None, totals_clients=None, totals_projects=None, local_vars_configuration=None):  # noqa: E501
        """CombinedReportsData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._series_job_codes = None
        self._series_tasks = None
        self._series_clients = None
        self._series_projects = None
        self._totals_job_codes = None
        self._totals_tasks = None
        self._totals_clients = None
        self._totals_projects = None
        self.discriminator = None

        if series_job_codes is not None:
            self.series_job_codes = series_job_codes
        if series_tasks is not None:
            self.series_tasks = series_tasks
        if series_clients is not None:
            self.series_clients = series_clients
        if series_projects is not None:
            self.series_projects = series_projects
        if totals_job_codes is not None:
            self.totals_job_codes = totals_job_codes
        if totals_tasks is not None:
            self.totals_tasks = totals_tasks
        if totals_clients is not None:
            self.totals_clients = totals_clients
        if totals_projects is not None:
            self.totals_projects = totals_projects

    @property
    def series_job_codes(self):
        """Gets the series_job_codes of this CombinedReportsData.  # noqa: E501


        :return: The series_job_codes of this CombinedReportsData.  # noqa: E501
        :rtype: list[JobSeriesReportItem]
        """
        return self._series_job_codes

    @series_job_codes.setter
    def series_job_codes(self, series_job_codes):
        """Sets the series_job_codes of this CombinedReportsData.


        :param series_job_codes: The series_job_codes of this CombinedReportsData.  # noqa: E501
        :type: list[JobSeriesReportItem]
        """

        self._series_job_codes = series_job_codes

    @property
    def series_tasks(self):
        """Gets the series_tasks of this CombinedReportsData.  # noqa: E501


        :return: The series_tasks of this CombinedReportsData.  # noqa: E501
        :rtype: list[TaskSeriesReportItem]
        """
        return self._series_tasks

    @series_tasks.setter
    def series_tasks(self, series_tasks):
        """Sets the series_tasks of this CombinedReportsData.


        :param series_tasks: The series_tasks of this CombinedReportsData.  # noqa: E501
        :type: list[TaskSeriesReportItem]
        """

        self._series_tasks = series_tasks

    @property
    def series_clients(self):
        """Gets the series_clients of this CombinedReportsData.  # noqa: E501


        :return: The series_clients of this CombinedReportsData.  # noqa: E501
        :rtype: list[ClientSeriesReportItem]
        """
        return self._series_clients

    @series_clients.setter
    def series_clients(self, series_clients):
        """Sets the series_clients of this CombinedReportsData.


        :param series_clients: The series_clients of this CombinedReportsData.  # noqa: E501
        :type: list[ClientSeriesReportItem]
        """

        self._series_clients = series_clients

    @property
    def series_projects(self):
        """Gets the series_projects of this CombinedReportsData.  # noqa: E501


        :return: The series_projects of this CombinedReportsData.  # noqa: E501
        :rtype: list[ProjectSeriesReportItem]
        """
        return self._series_projects

    @series_projects.setter
    def series_projects(self, series_projects):
        """Sets the series_projects of this CombinedReportsData.


        :param series_projects: The series_projects of this CombinedReportsData.  # noqa: E501
        :type: list[ProjectSeriesReportItem]
        """

        self._series_projects = series_projects

    @property
    def totals_job_codes(self):
        """Gets the totals_job_codes of this CombinedReportsData.  # noqa: E501


        :return: The totals_job_codes of this CombinedReportsData.  # noqa: E501
        :rtype: list[JobTotalsReportItem]
        """
        return self._totals_job_codes

    @totals_job_codes.setter
    def totals_job_codes(self, totals_job_codes):
        """Sets the totals_job_codes of this CombinedReportsData.


        :param totals_job_codes: The totals_job_codes of this CombinedReportsData.  # noqa: E501
        :type: list[JobTotalsReportItem]
        """

        self._totals_job_codes = totals_job_codes

    @property
    def totals_tasks(self):
        """Gets the totals_tasks of this CombinedReportsData.  # noqa: E501


        :return: The totals_tasks of this CombinedReportsData.  # noqa: E501
        :rtype: list[TaskTotalsReportItem]
        """
        return self._totals_tasks

    @totals_tasks.setter
    def totals_tasks(self, totals_tasks):
        """Sets the totals_tasks of this CombinedReportsData.


        :param totals_tasks: The totals_tasks of this CombinedReportsData.  # noqa: E501
        :type: list[TaskTotalsReportItem]
        """

        self._totals_tasks = totals_tasks

    @property
    def totals_clients(self):
        """Gets the totals_clients of this CombinedReportsData.  # noqa: E501


        :return: The totals_clients of this CombinedReportsData.  # noqa: E501
        :rtype: list[ClientTotalsReportItem]
        """
        return self._totals_clients

    @totals_clients.setter
    def totals_clients(self, totals_clients):
        """Sets the totals_clients of this CombinedReportsData.


        :param totals_clients: The totals_clients of this CombinedReportsData.  # noqa: E501
        :type: list[ClientTotalsReportItem]
        """

        self._totals_clients = totals_clients

    @property
    def totals_projects(self):
        """Gets the totals_projects of this CombinedReportsData.  # noqa: E501


        :return: The totals_projects of this CombinedReportsData.  # noqa: E501
        :rtype: list[ProjectTotalsReportItem]
        """
        return self._totals_projects

    @totals_projects.setter
    def totals_projects(self, totals_projects):
        """Sets the totals_projects of this CombinedReportsData.


        :param totals_projects: The totals_projects of this CombinedReportsData.  # noqa: E501
        :type: list[ProjectTotalsReportItem]
        """

        self._totals_projects = totals_projects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CombinedReportsData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CombinedReportsData):
            return True

        return self.to_dict() != other.to_dict()
