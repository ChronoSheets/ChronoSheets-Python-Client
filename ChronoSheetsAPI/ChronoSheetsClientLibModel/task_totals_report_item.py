# coding: utf-8

"""
    ChronoSheets API

    <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ChronoSheetsAPI.configuration import Configuration


class TaskTotalsReportItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'organisation_id': 'int',
        'user_id': 'int',
        'task_id': 'int',
        'task_name': 'str',
        'span_seconds': 'int'
    }

    attribute_map = {
        'organisation_id': 'OrganisationId',
        'user_id': 'UserId',
        'task_id': 'TaskId',
        'task_name': 'TaskName',
        'span_seconds': 'SpanSeconds'
    }

    def __init__(self, organisation_id=None, user_id=None, task_id=None, task_name=None, span_seconds=None, local_vars_configuration=None):  # noqa: E501
        """TaskTotalsReportItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._organisation_id = None
        self._user_id = None
        self._task_id = None
        self._task_name = None
        self._span_seconds = None
        self.discriminator = None

        if organisation_id is not None:
            self.organisation_id = organisation_id
        if user_id is not None:
            self.user_id = user_id
        if task_id is not None:
            self.task_id = task_id
        if task_name is not None:
            self.task_name = task_name
        if span_seconds is not None:
            self.span_seconds = span_seconds

    @property
    def organisation_id(self):
        """Gets the organisation_id of this TaskTotalsReportItem.  # noqa: E501


        :return: The organisation_id of this TaskTotalsReportItem.  # noqa: E501
        :rtype: int
        """
        return self._organisation_id

    @organisation_id.setter
    def organisation_id(self, organisation_id):
        """Sets the organisation_id of this TaskTotalsReportItem.


        :param organisation_id: The organisation_id of this TaskTotalsReportItem.  # noqa: E501
        :type: int
        """

        self._organisation_id = organisation_id

    @property
    def user_id(self):
        """Gets the user_id of this TaskTotalsReportItem.  # noqa: E501


        :return: The user_id of this TaskTotalsReportItem.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TaskTotalsReportItem.


        :param user_id: The user_id of this TaskTotalsReportItem.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def task_id(self):
        """Gets the task_id of this TaskTotalsReportItem.  # noqa: E501


        :return: The task_id of this TaskTotalsReportItem.  # noqa: E501
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this TaskTotalsReportItem.


        :param task_id: The task_id of this TaskTotalsReportItem.  # noqa: E501
        :type: int
        """

        self._task_id = task_id

    @property
    def task_name(self):
        """Gets the task_name of this TaskTotalsReportItem.  # noqa: E501


        :return: The task_name of this TaskTotalsReportItem.  # noqa: E501
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """Sets the task_name of this TaskTotalsReportItem.


        :param task_name: The task_name of this TaskTotalsReportItem.  # noqa: E501
        :type: str
        """

        self._task_name = task_name

    @property
    def span_seconds(self):
        """Gets the span_seconds of this TaskTotalsReportItem.  # noqa: E501


        :return: The span_seconds of this TaskTotalsReportItem.  # noqa: E501
        :rtype: int
        """
        return self._span_seconds

    @span_seconds.setter
    def span_seconds(self, span_seconds):
        """Sets the span_seconds of this TaskTotalsReportItem.


        :param span_seconds: The span_seconds of this TaskTotalsReportItem.  # noqa: E501
        :type: int
        """

        self._span_seconds = span_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskTotalsReportItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskTotalsReportItem):
            return True

        return self.to_dict() != other.to_dict()
