# coding: utf-8

"""
    ChronoSheets API

    <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CSUpdateGeoFenceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'geofence_id': 'int',
        'name': 'str',
        'fence_coordinates': 'list[CSBasicCoordinate]',
        'trigger_job_code_id': 'int',
        'trigger_task_id': 'int',
        'send_alert_to_org_group_id': 'int',
        'alert_settings': 'str',
        'trigger_settings': 'str',
        'start_time_hour': 'int',
        'start_time_minute': 'int',
        'end_time_hour': 'int',
        'end_time_minute': 'int'
    }

    attribute_map = {
        'geofence_id': 'GeofenceId',
        'name': 'Name',
        'fence_coordinates': 'FenceCoordinates',
        'trigger_job_code_id': 'TriggerJobCodeId',
        'trigger_task_id': 'TriggerTaskId',
        'send_alert_to_org_group_id': 'SendAlertToOrgGroupId',
        'alert_settings': 'AlertSettings',
        'trigger_settings': 'TriggerSettings',
        'start_time_hour': 'StartTimeHour',
        'start_time_minute': 'StartTimeMinute',
        'end_time_hour': 'EndTimeHour',
        'end_time_minute': 'EndTimeMinute'
    }

    def __init__(self, geofence_id=None, name=None, fence_coordinates=None, trigger_job_code_id=None, trigger_task_id=None, send_alert_to_org_group_id=None, alert_settings=None, trigger_settings=None, start_time_hour=None, start_time_minute=None, end_time_hour=None, end_time_minute=None):  # noqa: E501
        """CSUpdateGeoFenceRequest - a model defined in Swagger"""  # noqa: E501

        self._geofence_id = None
        self._name = None
        self._fence_coordinates = None
        self._trigger_job_code_id = None
        self._trigger_task_id = None
        self._send_alert_to_org_group_id = None
        self._alert_settings = None
        self._trigger_settings = None
        self._start_time_hour = None
        self._start_time_minute = None
        self._end_time_hour = None
        self._end_time_minute = None
        self.discriminator = None

        if geofence_id is not None:
            self.geofence_id = geofence_id
        if name is not None:
            self.name = name
        if fence_coordinates is not None:
            self.fence_coordinates = fence_coordinates
        if trigger_job_code_id is not None:
            self.trigger_job_code_id = trigger_job_code_id
        if trigger_task_id is not None:
            self.trigger_task_id = trigger_task_id
        if send_alert_to_org_group_id is not None:
            self.send_alert_to_org_group_id = send_alert_to_org_group_id
        if alert_settings is not None:
            self.alert_settings = alert_settings
        if trigger_settings is not None:
            self.trigger_settings = trigger_settings
        if start_time_hour is not None:
            self.start_time_hour = start_time_hour
        if start_time_minute is not None:
            self.start_time_minute = start_time_minute
        if end_time_hour is not None:
            self.end_time_hour = end_time_hour
        if end_time_minute is not None:
            self.end_time_minute = end_time_minute

    @property
    def geofence_id(self):
        """Gets the geofence_id of this CSUpdateGeoFenceRequest.  # noqa: E501

        The ID of the geofence you want to update  # noqa: E501

        :return: The geofence_id of this CSUpdateGeoFenceRequest.  # noqa: E501
        :rtype: int
        """
        return self._geofence_id

    @geofence_id.setter
    def geofence_id(self, geofence_id):
        """Sets the geofence_id of this CSUpdateGeoFenceRequest.

        The ID of the geofence you want to update  # noqa: E501

        :param geofence_id: The geofence_id of this CSUpdateGeoFenceRequest.  # noqa: E501
        :type: int
        """

        self._geofence_id = geofence_id

    @property
    def name(self):
        """Gets the name of this CSUpdateGeoFenceRequest.  # noqa: E501

        The name of the geo fence  # noqa: E501

        :return: The name of this CSUpdateGeoFenceRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CSUpdateGeoFenceRequest.

        The name of the geo fence  # noqa: E501

        :param name: The name of this CSUpdateGeoFenceRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def fence_coordinates(self):
        """Gets the fence_coordinates of this CSUpdateGeoFenceRequest.  # noqa: E501

        A list of coordinates specifying the geofence region  # noqa: E501

        :return: The fence_coordinates of this CSUpdateGeoFenceRequest.  # noqa: E501
        :rtype: list[CSBasicCoordinate]
        """
        return self._fence_coordinates

    @fence_coordinates.setter
    def fence_coordinates(self, fence_coordinates):
        """Sets the fence_coordinates of this CSUpdateGeoFenceRequest.

        A list of coordinates specifying the geofence region  # noqa: E501

        :param fence_coordinates: The fence_coordinates of this CSUpdateGeoFenceRequest.  # noqa: E501
        :type: list[CSBasicCoordinate]
        """

        self._fence_coordinates = fence_coordinates

    @property
    def trigger_job_code_id(self):
        """Gets the trigger_job_code_id of this CSUpdateGeoFenceRequest.  # noqa: E501

        The job code to be used when the person enters/leaves the geofence  # noqa: E501

        :return: The trigger_job_code_id of this CSUpdateGeoFenceRequest.  # noqa: E501
        :rtype: int
        """
        return self._trigger_job_code_id

    @trigger_job_code_id.setter
    def trigger_job_code_id(self, trigger_job_code_id):
        """Sets the trigger_job_code_id of this CSUpdateGeoFenceRequest.

        The job code to be used when the person enters/leaves the geofence  # noqa: E501

        :param trigger_job_code_id: The trigger_job_code_id of this CSUpdateGeoFenceRequest.  # noqa: E501
        :type: int
        """

        self._trigger_job_code_id = trigger_job_code_id

    @property
    def trigger_task_id(self):
        """Gets the trigger_task_id of this CSUpdateGeoFenceRequest.  # noqa: E501

        The task to be used when the person enters/leaves the geofence  # noqa: E501

        :return: The trigger_task_id of this CSUpdateGeoFenceRequest.  # noqa: E501
        :rtype: int
        """
        return self._trigger_task_id

    @trigger_task_id.setter
    def trigger_task_id(self, trigger_task_id):
        """Sets the trigger_task_id of this CSUpdateGeoFenceRequest.

        The task to be used when the person enters/leaves the geofence  # noqa: E501

        :param trigger_task_id: The trigger_task_id of this CSUpdateGeoFenceRequest.  # noqa: E501
        :type: int
        """

        self._trigger_task_id = trigger_task_id

    @property
    def send_alert_to_org_group_id(self):
        """Gets the send_alert_to_org_group_id of this CSUpdateGeoFenceRequest.  # noqa: E501

        Send an alert to a user, specified by their user ID  # noqa: E501

        :return: The send_alert_to_org_group_id of this CSUpdateGeoFenceRequest.  # noqa: E501
        :rtype: int
        """
        return self._send_alert_to_org_group_id

    @send_alert_to_org_group_id.setter
    def send_alert_to_org_group_id(self, send_alert_to_org_group_id):
        """Sets the send_alert_to_org_group_id of this CSUpdateGeoFenceRequest.

        Send an alert to a user, specified by their user ID  # noqa: E501

        :param send_alert_to_org_group_id: The send_alert_to_org_group_id of this CSUpdateGeoFenceRequest.  # noqa: E501
        :type: int
        """

        self._send_alert_to_org_group_id = send_alert_to_org_group_id

    @property
    def alert_settings(self):
        """Gets the alert_settings of this CSUpdateGeoFenceRequest.  # noqa: E501

        Define when you want the alerts to be setn  # noqa: E501

        :return: The alert_settings of this CSUpdateGeoFenceRequest.  # noqa: E501
        :rtype: str
        """
        return self._alert_settings

    @alert_settings.setter
    def alert_settings(self, alert_settings):
        """Sets the alert_settings of this CSUpdateGeoFenceRequest.

        Define when you want the alerts to be setn  # noqa: E501

        :param alert_settings: The alert_settings of this CSUpdateGeoFenceRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "SendWhenEntering", "SendWhenExiting", "SendWhenEnteringOrExiting"]  # noqa: E501
        if alert_settings not in allowed_values:
            raise ValueError(
                "Invalid value for `alert_settings` ({0}), must be one of {1}"  # noqa: E501
                .format(alert_settings, allowed_values)
            )

        self._alert_settings = alert_settings

    @property
    def trigger_settings(self):
        """Gets the trigger_settings of this CSUpdateGeoFenceRequest.  # noqa: E501

        Define how to you want to trigger the timesheet automation  # noqa: E501

        :return: The trigger_settings of this CSUpdateGeoFenceRequest.  # noqa: E501
        :rtype: str
        """
        return self._trigger_settings

    @trigger_settings.setter
    def trigger_settings(self, trigger_settings):
        """Sets the trigger_settings of this CSUpdateGeoFenceRequest.

        Define how to you want to trigger the timesheet automation  # noqa: E501

        :param trigger_settings: The trigger_settings of this CSUpdateGeoFenceRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "StartTimesheetWhenEntering", "StopTimesheetWhenEntering", "StartOnEnterStopOnLeave"]  # noqa: E501
        if trigger_settings not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger_settings` ({0}), must be one of {1}"  # noqa: E501
                .format(trigger_settings, allowed_values)
            )

        self._trigger_settings = trigger_settings

    @property
    def start_time_hour(self):
        """Gets the start_time_hour of this CSUpdateGeoFenceRequest.  # noqa: E501

        The start hour in which this geofence should apply.  After this time, the geofence will be active.  # noqa: E501

        :return: The start_time_hour of this CSUpdateGeoFenceRequest.  # noqa: E501
        :rtype: int
        """
        return self._start_time_hour

    @start_time_hour.setter
    def start_time_hour(self, start_time_hour):
        """Sets the start_time_hour of this CSUpdateGeoFenceRequest.

        The start hour in which this geofence should apply.  After this time, the geofence will be active.  # noqa: E501

        :param start_time_hour: The start_time_hour of this CSUpdateGeoFenceRequest.  # noqa: E501
        :type: int
        """

        self._start_time_hour = start_time_hour

    @property
    def start_time_minute(self):
        """Gets the start_time_minute of this CSUpdateGeoFenceRequest.  # noqa: E501

        The start minute in which this geofence should apply.  After this time, the geofence will be active.  # noqa: E501

        :return: The start_time_minute of this CSUpdateGeoFenceRequest.  # noqa: E501
        :rtype: int
        """
        return self._start_time_minute

    @start_time_minute.setter
    def start_time_minute(self, start_time_minute):
        """Sets the start_time_minute of this CSUpdateGeoFenceRequest.

        The start minute in which this geofence should apply.  After this time, the geofence will be active.  # noqa: E501

        :param start_time_minute: The start_time_minute of this CSUpdateGeoFenceRequest.  # noqa: E501
        :type: int
        """

        self._start_time_minute = start_time_minute

    @property
    def end_time_hour(self):
        """Gets the end_time_hour of this CSUpdateGeoFenceRequest.  # noqa: E501

        The end hour in which this geofence will stop applying.  After this time, the geofence will be inactive.  # noqa: E501

        :return: The end_time_hour of this CSUpdateGeoFenceRequest.  # noqa: E501
        :rtype: int
        """
        return self._end_time_hour

    @end_time_hour.setter
    def end_time_hour(self, end_time_hour):
        """Sets the end_time_hour of this CSUpdateGeoFenceRequest.

        The end hour in which this geofence will stop applying.  After this time, the geofence will be inactive.  # noqa: E501

        :param end_time_hour: The end_time_hour of this CSUpdateGeoFenceRequest.  # noqa: E501
        :type: int
        """

        self._end_time_hour = end_time_hour

    @property
    def end_time_minute(self):
        """Gets the end_time_minute of this CSUpdateGeoFenceRequest.  # noqa: E501

        The end minute in which this geofence will stop applying.  After this time, the geofence will be inactive.  # noqa: E501

        :return: The end_time_minute of this CSUpdateGeoFenceRequest.  # noqa: E501
        :rtype: int
        """
        return self._end_time_minute

    @end_time_minute.setter
    def end_time_minute(self, end_time_minute):
        """Sets the end_time_minute of this CSUpdateGeoFenceRequest.

        The end minute in which this geofence will stop applying.  After this time, the geofence will be inactive.  # noqa: E501

        :param end_time_minute: The end_time_minute of this CSUpdateGeoFenceRequest.  # noqa: E501
        :type: int
        """

        self._end_time_minute = end_time_minute

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CSUpdateGeoFenceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CSUpdateGeoFenceRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
