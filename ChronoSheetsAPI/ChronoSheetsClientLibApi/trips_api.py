# coding: utf-8

"""
    ChronoSheets API

    <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ChronoSheetsAPI.api_client import ApiClient
from ChronoSheetsAPI.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class TripsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def trips_create_trip(self, x_chronosheets_auth, request, **kwargs):  # noqa: E501
        """Create a new trip.  Important: create a timesheet record before calling this, passing in the new timesheet record id as a reference.    Requires the 'SubmitTimesheets' permission.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trips_create_trip(x_chronosheets_auth, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str x_chronosheets_auth: The ChronoSheets Auth Token (required)
        :param CreateTripRequest request: A Create Trip Request object containing values for the new Trip to create (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ApiResponseInt32
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.trips_create_trip_with_http_info(x_chronosheets_auth, request, **kwargs)  # noqa: E501

    def trips_create_trip_with_http_info(self, x_chronosheets_auth, request, **kwargs):  # noqa: E501
        """Create a new trip.  Important: create a timesheet record before calling this, passing in the new timesheet record id as a reference.    Requires the 'SubmitTimesheets' permission.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trips_create_trip_with_http_info(x_chronosheets_auth, request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str x_chronosheets_auth: The ChronoSheets Auth Token (required)
        :param CreateTripRequest request: A Create Trip Request object containing values for the new Trip to create (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ApiResponseInt32, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'x_chronosheets_auth',
            'request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trips_create_trip" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'x_chronosheets_auth' is set
        if self.api_client.client_side_validation and ('x_chronosheets_auth' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_chronosheets_auth'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_chronosheets_auth` when calling `trips_create_trip`")  # noqa: E501
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and ('request' not in local_var_params or  # noqa: E501
                                                        local_var_params['request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `request` when calling `trips_create_trip`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_chronosheets_auth' in local_var_params:
            header_params['x-chronosheets-auth'] = local_var_params['x_chronosheets_auth']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in local_var_params:
            body_params = local_var_params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Trips/CreateTrip', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseInt32',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def trips_get_my_trip_by_id(self, trip_id, x_chronosheets_auth, **kwargs):  # noqa: E501
        """Get trip by Id.    Requires the 'ViewMyTrips' permission.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trips_get_my_trip_by_id(trip_id, x_chronosheets_auth, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int trip_id: The ID of the Trip you want to get (required)
        :param str x_chronosheets_auth: The ChronoSheets Auth Token (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ApiResponseTrip
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.trips_get_my_trip_by_id_with_http_info(trip_id, x_chronosheets_auth, **kwargs)  # noqa: E501

    def trips_get_my_trip_by_id_with_http_info(self, trip_id, x_chronosheets_auth, **kwargs):  # noqa: E501
        """Get trip by Id.    Requires the 'ViewMyTrips' permission.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trips_get_my_trip_by_id_with_http_info(trip_id, x_chronosheets_auth, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int trip_id: The ID of the Trip you want to get (required)
        :param str x_chronosheets_auth: The ChronoSheets Auth Token (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ApiResponseTrip, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'trip_id',
            'x_chronosheets_auth'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trips_get_my_trip_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'trip_id' is set
        if self.api_client.client_side_validation and ('trip_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['trip_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `trip_id` when calling `trips_get_my_trip_by_id`")  # noqa: E501
        # verify the required parameter 'x_chronosheets_auth' is set
        if self.api_client.client_side_validation and ('x_chronosheets_auth' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_chronosheets_auth'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_chronosheets_auth` when calling `trips_get_my_trip_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'trip_id' in local_var_params and local_var_params['trip_id'] is not None:  # noqa: E501
            query_params.append(('TripId', local_var_params['trip_id']))  # noqa: E501

        header_params = {}
        if 'x_chronosheets_auth' in local_var_params:
            header_params['x-chronosheets-auth'] = local_var_params['x_chronosheets_auth']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Trips/GetMyTripById', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseTrip',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def trips_get_my_trips(self, start_date, end_date, x_chronosheets_auth, **kwargs):  # noqa: E501
        """Get my trips.  Get the GPS trips you've recorded and submitted.    Requires the 'ViewMyTrips' permission.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trips_get_my_trips(start_date, end_date, x_chronosheets_auth, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param datetime start_date: The Start date of the date range.  Trips after this date will be obtained. (required)
        :param datetime end_date: The End date of the date range.  Trips before this date will be obtained. (required)
        :param str x_chronosheets_auth: The ChronoSheets Auth Token (required)
        :param int skip: Skip this many Trips
        :param int take: Take this many Trips
        :param int vehicle_id: Filter by a particular Vehicle (get trips made with a particular vehicle), specified by VehicleId
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ApiResponseForPaginatedListTrip
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.trips_get_my_trips_with_http_info(start_date, end_date, x_chronosheets_auth, **kwargs)  # noqa: E501

    def trips_get_my_trips_with_http_info(self, start_date, end_date, x_chronosheets_auth, **kwargs):  # noqa: E501
        """Get my trips.  Get the GPS trips you've recorded and submitted.    Requires the 'ViewMyTrips' permission.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trips_get_my_trips_with_http_info(start_date, end_date, x_chronosheets_auth, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param datetime start_date: The Start date of the date range.  Trips after this date will be obtained. (required)
        :param datetime end_date: The End date of the date range.  Trips before this date will be obtained. (required)
        :param str x_chronosheets_auth: The ChronoSheets Auth Token (required)
        :param int skip: Skip this many Trips
        :param int take: Take this many Trips
        :param int vehicle_id: Filter by a particular Vehicle (get trips made with a particular vehicle), specified by VehicleId
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ApiResponseForPaginatedListTrip, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'start_date',
            'end_date',
            'x_chronosheets_auth',
            'skip',
            'take',
            'vehicle_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trips_get_my_trips" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'start_date' is set
        if self.api_client.client_side_validation and ('start_date' not in local_var_params or  # noqa: E501
                                                        local_var_params['start_date'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `start_date` when calling `trips_get_my_trips`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if self.api_client.client_side_validation and ('end_date' not in local_var_params or  # noqa: E501
                                                        local_var_params['end_date'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `end_date` when calling `trips_get_my_trips`")  # noqa: E501
        # verify the required parameter 'x_chronosheets_auth' is set
        if self.api_client.client_side_validation and ('x_chronosheets_auth' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_chronosheets_auth'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_chronosheets_auth` when calling `trips_get_my_trips`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in local_var_params and local_var_params['start_date'] is not None:  # noqa: E501
            query_params.append(('StartDate', local_var_params['start_date']))  # noqa: E501
        if 'end_date' in local_var_params and local_var_params['end_date'] is not None:  # noqa: E501
            query_params.append(('EndDate', local_var_params['end_date']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params['skip'] is not None:  # noqa: E501
            query_params.append(('Skip', local_var_params['skip']))  # noqa: E501
        if 'take' in local_var_params and local_var_params['take'] is not None:  # noqa: E501
            query_params.append(('Take', local_var_params['take']))  # noqa: E501
        if 'vehicle_id' in local_var_params and local_var_params['vehicle_id'] is not None:  # noqa: E501
            query_params.append(('VehicleId', local_var_params['vehicle_id']))  # noqa: E501

        header_params = {}
        if 'x_chronosheets_auth' in local_var_params:
            header_params['x-chronosheets-auth'] = local_var_params['x_chronosheets_auth']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Trips/GetMyTrips', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseForPaginatedListTrip',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
