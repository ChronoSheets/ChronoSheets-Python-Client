# coding: utf-8

"""
    ChronoSheets API

    <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ChronoSheetsAPI.api_client import ApiClient


class FileAttachmentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def file_attachments_delete_timesheet_file_attachment(self, file_attachment_id, x_chronosheets_auth, **kwargs):  # noqa: E501
        """Delete a particular timesheet file attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.file_attachments_delete_timesheet_file_attachment(file_attachment_id, x_chronosheets_auth, async=True)
        >>> result = thread.get()

        :param async bool
        :param int file_attachment_id: The Id of the file attachment to delete (required)
        :param str x_chronosheets_auth: The ChronoSheets Auth Token (required)
        :return: CSApiResponseBoolean
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.file_attachments_delete_timesheet_file_attachment_with_http_info(file_attachment_id, x_chronosheets_auth, **kwargs)  # noqa: E501
        else:
            (data) = self.file_attachments_delete_timesheet_file_attachment_with_http_info(file_attachment_id, x_chronosheets_auth, **kwargs)  # noqa: E501
            return data

    def file_attachments_delete_timesheet_file_attachment_with_http_info(self, file_attachment_id, x_chronosheets_auth, **kwargs):  # noqa: E501
        """Delete a particular timesheet file attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.file_attachments_delete_timesheet_file_attachment_with_http_info(file_attachment_id, x_chronosheets_auth, async=True)
        >>> result = thread.get()

        :param async bool
        :param int file_attachment_id: The Id of the file attachment to delete (required)
        :param str x_chronosheets_auth: The ChronoSheets Auth Token (required)
        :return: CSApiResponseBoolean
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_attachment_id', 'x_chronosheets_auth']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_attachments_delete_timesheet_file_attachment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_attachment_id' is set
        if ('file_attachment_id' not in params or
                params['file_attachment_id'] is None):
            raise ValueError("Missing the required parameter `file_attachment_id` when calling `file_attachments_delete_timesheet_file_attachment`")  # noqa: E501
        # verify the required parameter 'x_chronosheets_auth' is set
        if ('x_chronosheets_auth' not in params or
                params['x_chronosheets_auth'] is None):
            raise ValueError("Missing the required parameter `x_chronosheets_auth` when calling `file_attachments_delete_timesheet_file_attachment`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'file_attachment_id' in params:
            query_params.append(('FileAttachmentId', params['file_attachment_id']))  # noqa: E501

        header_params = {}
        if 'x_chronosheets_auth' in params:
            header_params['x-chronosheets-auth'] = params['x_chronosheets_auth']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/FileAttachments/DeleteTimesheetFileAttachment', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CSApiResponseBoolean',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_attachments_get_my_file_attachments(self, start_date, end_date, skip, take, x_chronosheets_auth, **kwargs):  # noqa: E501
        """Get my file attachments.  Get files you&#39;ve attached to timesheets.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.file_attachments_get_my_file_attachments(start_date, end_date, skip, take, x_chronosheets_auth, async=True)
        >>> result = thread.get()

        :param async bool
        :param datetime start_date: The Start date of the date range.  File attachments after this date will be obtained. (required)
        :param datetime end_date: The End date of the date range.  File attachments before this date will be obtained. (required)
        :param int skip: Skip this many File attachments (required)
        :param int take: Take this many File attachments (required)
        :param str x_chronosheets_auth: The ChronoSheets Auth Token (required)
        :return: CSApiResponseForPaginatedListTimesheetFileAttachment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.file_attachments_get_my_file_attachments_with_http_info(start_date, end_date, skip, take, x_chronosheets_auth, **kwargs)  # noqa: E501
        else:
            (data) = self.file_attachments_get_my_file_attachments_with_http_info(start_date, end_date, skip, take, x_chronosheets_auth, **kwargs)  # noqa: E501
            return data

    def file_attachments_get_my_file_attachments_with_http_info(self, start_date, end_date, skip, take, x_chronosheets_auth, **kwargs):  # noqa: E501
        """Get my file attachments.  Get files you&#39;ve attached to timesheets.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.file_attachments_get_my_file_attachments_with_http_info(start_date, end_date, skip, take, x_chronosheets_auth, async=True)
        >>> result = thread.get()

        :param async bool
        :param datetime start_date: The Start date of the date range.  File attachments after this date will be obtained. (required)
        :param datetime end_date: The End date of the date range.  File attachments before this date will be obtained. (required)
        :param int skip: Skip this many File attachments (required)
        :param int take: Take this many File attachments (required)
        :param str x_chronosheets_auth: The ChronoSheets Auth Token (required)
        :return: CSApiResponseForPaginatedListTimesheetFileAttachment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'skip', 'take', 'x_chronosheets_auth']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_attachments_get_my_file_attachments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_date' is set
        if ('start_date' not in params or
                params['start_date'] is None):
            raise ValueError("Missing the required parameter `start_date` when calling `file_attachments_get_my_file_attachments`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if ('end_date' not in params or
                params['end_date'] is None):
            raise ValueError("Missing the required parameter `end_date` when calling `file_attachments_get_my_file_attachments`")  # noqa: E501
        # verify the required parameter 'skip' is set
        if ('skip' not in params or
                params['skip'] is None):
            raise ValueError("Missing the required parameter `skip` when calling `file_attachments_get_my_file_attachments`")  # noqa: E501
        # verify the required parameter 'take' is set
        if ('take' not in params or
                params['take'] is None):
            raise ValueError("Missing the required parameter `take` when calling `file_attachments_get_my_file_attachments`")  # noqa: E501
        # verify the required parameter 'x_chronosheets_auth' is set
        if ('x_chronosheets_auth' not in params or
                params['x_chronosheets_auth'] is None):
            raise ValueError("Missing the required parameter `x_chronosheets_auth` when calling `file_attachments_get_my_file_attachments`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('StartDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('EndDate', params['end_date']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('Skip', params['skip']))  # noqa: E501
        if 'take' in params:
            query_params.append(('Take', params['take']))  # noqa: E501

        header_params = {}
        if 'x_chronosheets_auth' in params:
            header_params['x-chronosheets-auth'] = params['x_chronosheets_auth']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/FileAttachments/GetMyFileAttachments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CSApiResponseForPaginatedListTimesheetFileAttachment',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
