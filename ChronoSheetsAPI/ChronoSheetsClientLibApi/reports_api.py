# coding: utf-8

"""
    The ChronoSheets API

    <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ChronoSheetsAPI.api_client import ApiClient


class ReportsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def reports_get_all_charts_data_admin(self, start_date, end_date, user_ids, x_chronosheets_auth, **kwargs):  # noqa: E501
        """Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reports_get_all_charts_data_admin(start_date, end_date, user_ids, x_chronosheets_auth, async=True)
        >>> result = thread.get()

        :param async bool
        :param datetime start_date: The start date for the date range.  Report data in the response is after this date (required)
        :param datetime end_date: The end date for the date range.  Report data in the response is before this date (required)
        :param str user_ids: A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (required)
        :param str x_chronosheets_auth: The ChronoSheets Auth Token (required)
        :return: CSApiResponseCombinedReportsData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.reports_get_all_charts_data_admin_with_http_info(start_date, end_date, user_ids, x_chronosheets_auth, **kwargs)  # noqa: E501
        else:
            (data) = self.reports_get_all_charts_data_admin_with_http_info(start_date, end_date, user_ids, x_chronosheets_auth, **kwargs)  # noqa: E501
            return data

    def reports_get_all_charts_data_admin_with_http_info(self, start_date, end_date, user_ids, x_chronosheets_auth, **kwargs):  # noqa: E501
        """Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reports_get_all_charts_data_admin_with_http_info(start_date, end_date, user_ids, x_chronosheets_auth, async=True)
        >>> result = thread.get()

        :param async bool
        :param datetime start_date: The start date for the date range.  Report data in the response is after this date (required)
        :param datetime end_date: The end date for the date range.  Report data in the response is before this date (required)
        :param str user_ids: A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (required)
        :param str x_chronosheets_auth: The ChronoSheets Auth Token (required)
        :return: CSApiResponseCombinedReportsData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'user_ids', 'x_chronosheets_auth']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_get_all_charts_data_admin" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_date' is set
        if ('start_date' not in params or
                params['start_date'] is None):
            raise ValueError("Missing the required parameter `start_date` when calling `reports_get_all_charts_data_admin`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if ('end_date' not in params or
                params['end_date'] is None):
            raise ValueError("Missing the required parameter `end_date` when calling `reports_get_all_charts_data_admin`")  # noqa: E501
        # verify the required parameter 'user_ids' is set
        if ('user_ids' not in params or
                params['user_ids'] is None):
            raise ValueError("Missing the required parameter `user_ids` when calling `reports_get_all_charts_data_admin`")  # noqa: E501
        # verify the required parameter 'x_chronosheets_auth' is set
        if ('x_chronosheets_auth' not in params or
                params['x_chronosheets_auth'] is None):
            raise ValueError("Missing the required parameter `x_chronosheets_auth` when calling `reports_get_all_charts_data_admin`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('StartDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('EndDate', params['end_date']))  # noqa: E501
        if 'user_ids' in params:
            query_params.append(('UserIds', params['user_ids']))  # noqa: E501

        header_params = {}
        if 'x_chronosheets_auth' in params:
            header_params['x-chronosheets-auth'] = params['x_chronosheets_auth']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/Reports/GetAllChartsDataAdmin', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CSApiResponseCombinedReportsData',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reports_get_all_charts_data_user(self, start_date, end_date, x_chronosheets_auth, **kwargs):  # noqa: E501
        """Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user&#39;s own reports.    Requires the &#39;ViewOwnReports&#39; permission.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reports_get_all_charts_data_user(start_date, end_date, x_chronosheets_auth, async=True)
        >>> result = thread.get()

        :param async bool
        :param datetime start_date: The start date for the date range.  Report data in the response is after this date (required)
        :param datetime end_date: The end date for the date range.  Report data in the response is before this date (required)
        :param str x_chronosheets_auth: The ChronoSheets Auth Token (required)
        :return: CSApiResponseCombinedReportsData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.reports_get_all_charts_data_user_with_http_info(start_date, end_date, x_chronosheets_auth, **kwargs)  # noqa: E501
        else:
            (data) = self.reports_get_all_charts_data_user_with_http_info(start_date, end_date, x_chronosheets_auth, **kwargs)  # noqa: E501
            return data

    def reports_get_all_charts_data_user_with_http_info(self, start_date, end_date, x_chronosheets_auth, **kwargs):  # noqa: E501
        """Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user&#39;s own reports.    Requires the &#39;ViewOwnReports&#39; permission.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reports_get_all_charts_data_user_with_http_info(start_date, end_date, x_chronosheets_auth, async=True)
        >>> result = thread.get()

        :param async bool
        :param datetime start_date: The start date for the date range.  Report data in the response is after this date (required)
        :param datetime end_date: The end date for the date range.  Report data in the response is before this date (required)
        :param str x_chronosheets_auth: The ChronoSheets Auth Token (required)
        :return: CSApiResponseCombinedReportsData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'x_chronosheets_auth']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_get_all_charts_data_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_date' is set
        if ('start_date' not in params or
                params['start_date'] is None):
            raise ValueError("Missing the required parameter `start_date` when calling `reports_get_all_charts_data_user`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if ('end_date' not in params or
                params['end_date'] is None):
            raise ValueError("Missing the required parameter `end_date` when calling `reports_get_all_charts_data_user`")  # noqa: E501
        # verify the required parameter 'x_chronosheets_auth' is set
        if ('x_chronosheets_auth' not in params or
                params['x_chronosheets_auth'] is None):
            raise ValueError("Missing the required parameter `x_chronosheets_auth` when calling `reports_get_all_charts_data_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('StartDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('EndDate', params['end_date']))  # noqa: E501

        header_params = {}
        if 'x_chronosheets_auth' in params:
            header_params['x-chronosheets-auth'] = params['x_chronosheets_auth']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/Reports/GetAllChartsDataUser', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CSApiResponseCombinedReportsData',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reports_get_org_trip_by_id(self, trip_id, x_chronosheets_auth, **kwargs):  # noqa: E501
        """Get trip by Id, for reporting purposes.    Requires the &#39;ReportAdmin&#39; permission.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reports_get_org_trip_by_id(trip_id, x_chronosheets_auth, async=True)
        >>> result = thread.get()

        :param async bool
        :param int trip_id: The ID of the Trip you want to get (required)
        :param str x_chronosheets_auth: The ChronoSheets Auth Token (required)
        :return: CSApiResponseTrip
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.reports_get_org_trip_by_id_with_http_info(trip_id, x_chronosheets_auth, **kwargs)  # noqa: E501
        else:
            (data) = self.reports_get_org_trip_by_id_with_http_info(trip_id, x_chronosheets_auth, **kwargs)  # noqa: E501
            return data

    def reports_get_org_trip_by_id_with_http_info(self, trip_id, x_chronosheets_auth, **kwargs):  # noqa: E501
        """Get trip by Id, for reporting purposes.    Requires the &#39;ReportAdmin&#39; permission.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reports_get_org_trip_by_id_with_http_info(trip_id, x_chronosheets_auth, async=True)
        >>> result = thread.get()

        :param async bool
        :param int trip_id: The ID of the Trip you want to get (required)
        :param str x_chronosheets_auth: The ChronoSheets Auth Token (required)
        :return: CSApiResponseTrip
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['trip_id', 'x_chronosheets_auth']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_get_org_trip_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'trip_id' is set
        if ('trip_id' not in params or
                params['trip_id'] is None):
            raise ValueError("Missing the required parameter `trip_id` when calling `reports_get_org_trip_by_id`")  # noqa: E501
        # verify the required parameter 'x_chronosheets_auth' is set
        if ('x_chronosheets_auth' not in params or
                params['x_chronosheets_auth'] is None):
            raise ValueError("Missing the required parameter `x_chronosheets_auth` when calling `reports_get_org_trip_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'trip_id' in params:
            query_params.append(('TripId', params['trip_id']))  # noqa: E501

        header_params = {}
        if 'x_chronosheets_auth' in params:
            header_params['x-chronosheets-auth'] = params['x_chronosheets_auth']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/Reports/GetOrgTripById', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CSApiResponseTrip',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reports_get_organisation_timesheet_file_attachments(self, start_date, end_date, skip, take, user_ids, x_chronosheets_auth, **kwargs):  # noqa: E501
        """Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records.    Requires the &#39;ReportAdmin&#39; permission.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reports_get_organisation_timesheet_file_attachments(start_date, end_date, skip, take, user_ids, x_chronosheets_auth, async=True)
        >>> result = thread.get()

        :param async bool
        :param datetime start_date: The start date for the date range.  Report data in the response is after this date (required)
        :param datetime end_date: The end date for the date range.  Report data in the response is before this date (required)
        :param int skip: Skip this many items (required)
        :param int take: Take this many items (required)
        :param str user_ids: A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (required)
        :param str x_chronosheets_auth: The ChronoSheets Auth Token (required)
        :return: CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.reports_get_organisation_timesheet_file_attachments_with_http_info(start_date, end_date, skip, take, user_ids, x_chronosheets_auth, **kwargs)  # noqa: E501
        else:
            (data) = self.reports_get_organisation_timesheet_file_attachments_with_http_info(start_date, end_date, skip, take, user_ids, x_chronosheets_auth, **kwargs)  # noqa: E501
            return data

    def reports_get_organisation_timesheet_file_attachments_with_http_info(self, start_date, end_date, skip, take, user_ids, x_chronosheets_auth, **kwargs):  # noqa: E501
        """Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records.    Requires the &#39;ReportAdmin&#39; permission.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reports_get_organisation_timesheet_file_attachments_with_http_info(start_date, end_date, skip, take, user_ids, x_chronosheets_auth, async=True)
        >>> result = thread.get()

        :param async bool
        :param datetime start_date: The start date for the date range.  Report data in the response is after this date (required)
        :param datetime end_date: The end date for the date range.  Report data in the response is before this date (required)
        :param int skip: Skip this many items (required)
        :param int take: Take this many items (required)
        :param str user_ids: A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (required)
        :param str x_chronosheets_auth: The ChronoSheets Auth Token (required)
        :return: CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'skip', 'take', 'user_ids', 'x_chronosheets_auth']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_get_organisation_timesheet_file_attachments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_date' is set
        if ('start_date' not in params or
                params['start_date'] is None):
            raise ValueError("Missing the required parameter `start_date` when calling `reports_get_organisation_timesheet_file_attachments`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if ('end_date' not in params or
                params['end_date'] is None):
            raise ValueError("Missing the required parameter `end_date` when calling `reports_get_organisation_timesheet_file_attachments`")  # noqa: E501
        # verify the required parameter 'skip' is set
        if ('skip' not in params or
                params['skip'] is None):
            raise ValueError("Missing the required parameter `skip` when calling `reports_get_organisation_timesheet_file_attachments`")  # noqa: E501
        # verify the required parameter 'take' is set
        if ('take' not in params or
                params['take'] is None):
            raise ValueError("Missing the required parameter `take` when calling `reports_get_organisation_timesheet_file_attachments`")  # noqa: E501
        # verify the required parameter 'user_ids' is set
        if ('user_ids' not in params or
                params['user_ids'] is None):
            raise ValueError("Missing the required parameter `user_ids` when calling `reports_get_organisation_timesheet_file_attachments`")  # noqa: E501
        # verify the required parameter 'x_chronosheets_auth' is set
        if ('x_chronosheets_auth' not in params or
                params['x_chronosheets_auth'] is None):
            raise ValueError("Missing the required parameter `x_chronosheets_auth` when calling `reports_get_organisation_timesheet_file_attachments`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('StartDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('EndDate', params['end_date']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('Skip', params['skip']))  # noqa: E501
        if 'take' in params:
            query_params.append(('Take', params['take']))  # noqa: E501
        if 'user_ids' in params:
            query_params.append(('UserIds', params['user_ids']))  # noqa: E501

        header_params = {}
        if 'x_chronosheets_auth' in params:
            header_params['x-chronosheets-auth'] = params['x_chronosheets_auth']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/Reports/GetOrganisationTimesheetFileAttachments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reports_get_organisation_trips(self, start_date, end_date, skip, take, user_ids, x_chronosheets_auth, **kwargs):  # noqa: E501
        """Reports on Organisation trips (GPS tracking from whole organisation).    Requires the &#39;ReportAdmin&#39; permission.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reports_get_organisation_trips(start_date, end_date, skip, take, user_ids, x_chronosheets_auth, async=True)
        >>> result = thread.get()

        :param async bool
        :param datetime start_date: The start date for the date range.  Report data in the response is after this date (required)
        :param datetime end_date: The end date for the date range.  Report data in the response is before this date (required)
        :param int skip: Skip this many items (required)
        :param int take: Take this many items (required)
        :param str user_ids: A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (required)
        :param str x_chronosheets_auth: The ChronoSheets Auth Token (required)
        :return: CSApiResponseForPaginatedListOrgReportTrip
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.reports_get_organisation_trips_with_http_info(start_date, end_date, skip, take, user_ids, x_chronosheets_auth, **kwargs)  # noqa: E501
        else:
            (data) = self.reports_get_organisation_trips_with_http_info(start_date, end_date, skip, take, user_ids, x_chronosheets_auth, **kwargs)  # noqa: E501
            return data

    def reports_get_organisation_trips_with_http_info(self, start_date, end_date, skip, take, user_ids, x_chronosheets_auth, **kwargs):  # noqa: E501
        """Reports on Organisation trips (GPS tracking from whole organisation).    Requires the &#39;ReportAdmin&#39; permission.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reports_get_organisation_trips_with_http_info(start_date, end_date, skip, take, user_ids, x_chronosheets_auth, async=True)
        >>> result = thread.get()

        :param async bool
        :param datetime start_date: The start date for the date range.  Report data in the response is after this date (required)
        :param datetime end_date: The end date for the date range.  Report data in the response is before this date (required)
        :param int skip: Skip this many items (required)
        :param int take: Take this many items (required)
        :param str user_ids: A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (required)
        :param str x_chronosheets_auth: The ChronoSheets Auth Token (required)
        :return: CSApiResponseForPaginatedListOrgReportTrip
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'skip', 'take', 'user_ids', 'x_chronosheets_auth']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_get_organisation_trips" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_date' is set
        if ('start_date' not in params or
                params['start_date'] is None):
            raise ValueError("Missing the required parameter `start_date` when calling `reports_get_organisation_trips`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if ('end_date' not in params or
                params['end_date'] is None):
            raise ValueError("Missing the required parameter `end_date` when calling `reports_get_organisation_trips`")  # noqa: E501
        # verify the required parameter 'skip' is set
        if ('skip' not in params or
                params['skip'] is None):
            raise ValueError("Missing the required parameter `skip` when calling `reports_get_organisation_trips`")  # noqa: E501
        # verify the required parameter 'take' is set
        if ('take' not in params or
                params['take'] is None):
            raise ValueError("Missing the required parameter `take` when calling `reports_get_organisation_trips`")  # noqa: E501
        # verify the required parameter 'user_ids' is set
        if ('user_ids' not in params or
                params['user_ids'] is None):
            raise ValueError("Missing the required parameter `user_ids` when calling `reports_get_organisation_trips`")  # noqa: E501
        # verify the required parameter 'x_chronosheets_auth' is set
        if ('x_chronosheets_auth' not in params or
                params['x_chronosheets_auth'] is None):
            raise ValueError("Missing the required parameter `x_chronosheets_auth` when calling `reports_get_organisation_trips`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('StartDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('EndDate', params['end_date']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('Skip', params['skip']))  # noqa: E501
        if 'take' in params:
            query_params.append(('Take', params['take']))  # noqa: E501
        if 'user_ids' in params:
            query_params.append(('UserIds', params['user_ids']))  # noqa: E501

        header_params = {}
        if 'x_chronosheets_auth' in params:
            header_params['x-chronosheets-auth'] = params['x_chronosheets_auth']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/Reports/GetOrganisationTrips', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CSApiResponseForPaginatedListOrgReportTrip',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reports_get_raw_data_admin(self, start_date, end_date, user_ids, sort, order, skip, take, x_chronosheets_auth, **kwargs):  # noqa: E501
        """Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reports_get_raw_data_admin(start_date, end_date, user_ids, sort, order, skip, take, x_chronosheets_auth, async=True)
        >>> result = thread.get()

        :param async bool
        :param datetime start_date: The start date for the date range.  Report data in the response is after this date (required)
        :param datetime end_date: The end date for the date range.  Report data in the response is before this date (required)
        :param str user_ids: A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (required)
        :param str sort: Decide which column to sort on (required)
        :param str order: Decide which direction to sort the column (required)
        :param int skip: Skip this many rows (required)
        :param int take: Take this many rows (required)
        :param str x_chronosheets_auth: The ChronoSheets Auth Token (required)
        :return: CSApiResponseForPaginatedListRawReportItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.reports_get_raw_data_admin_with_http_info(start_date, end_date, user_ids, sort, order, skip, take, x_chronosheets_auth, **kwargs)  # noqa: E501
        else:
            (data) = self.reports_get_raw_data_admin_with_http_info(start_date, end_date, user_ids, sort, order, skip, take, x_chronosheets_auth, **kwargs)  # noqa: E501
            return data

    def reports_get_raw_data_admin_with_http_info(self, start_date, end_date, user_ids, sort, order, skip, take, x_chronosheets_auth, **kwargs):  # noqa: E501
        """Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reports_get_raw_data_admin_with_http_info(start_date, end_date, user_ids, sort, order, skip, take, x_chronosheets_auth, async=True)
        >>> result = thread.get()

        :param async bool
        :param datetime start_date: The start date for the date range.  Report data in the response is after this date (required)
        :param datetime end_date: The end date for the date range.  Report data in the response is before this date (required)
        :param str user_ids: A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (required)
        :param str sort: Decide which column to sort on (required)
        :param str order: Decide which direction to sort the column (required)
        :param int skip: Skip this many rows (required)
        :param int take: Take this many rows (required)
        :param str x_chronosheets_auth: The ChronoSheets Auth Token (required)
        :return: CSApiResponseForPaginatedListRawReportItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'user_ids', 'sort', 'order', 'skip', 'take', 'x_chronosheets_auth']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_get_raw_data_admin" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_date' is set
        if ('start_date' not in params or
                params['start_date'] is None):
            raise ValueError("Missing the required parameter `start_date` when calling `reports_get_raw_data_admin`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if ('end_date' not in params or
                params['end_date'] is None):
            raise ValueError("Missing the required parameter `end_date` when calling `reports_get_raw_data_admin`")  # noqa: E501
        # verify the required parameter 'user_ids' is set
        if ('user_ids' not in params or
                params['user_ids'] is None):
            raise ValueError("Missing the required parameter `user_ids` when calling `reports_get_raw_data_admin`")  # noqa: E501
        # verify the required parameter 'sort' is set
        if ('sort' not in params or
                params['sort'] is None):
            raise ValueError("Missing the required parameter `sort` when calling `reports_get_raw_data_admin`")  # noqa: E501
        # verify the required parameter 'order' is set
        if ('order' not in params or
                params['order'] is None):
            raise ValueError("Missing the required parameter `order` when calling `reports_get_raw_data_admin`")  # noqa: E501
        # verify the required parameter 'skip' is set
        if ('skip' not in params or
                params['skip'] is None):
            raise ValueError("Missing the required parameter `skip` when calling `reports_get_raw_data_admin`")  # noqa: E501
        # verify the required parameter 'take' is set
        if ('take' not in params or
                params['take'] is None):
            raise ValueError("Missing the required parameter `take` when calling `reports_get_raw_data_admin`")  # noqa: E501
        # verify the required parameter 'x_chronosheets_auth' is set
        if ('x_chronosheets_auth' not in params or
                params['x_chronosheets_auth'] is None):
            raise ValueError("Missing the required parameter `x_chronosheets_auth` when calling `reports_get_raw_data_admin`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('StartDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('EndDate', params['end_date']))  # noqa: E501
        if 'user_ids' in params:
            query_params.append(('UserIds', params['user_ids']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('Sort', params['sort']))  # noqa: E501
        if 'order' in params:
            query_params.append(('Order', params['order']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('Skip', params['skip']))  # noqa: E501
        if 'take' in params:
            query_params.append(('Take', params['take']))  # noqa: E501

        header_params = {}
        if 'x_chronosheets_auth' in params:
            header_params['x-chronosheets-auth'] = params['x_chronosheets_auth']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/Reports/GetRawDataAdmin', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CSApiResponseForPaginatedListRawReportItem',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reports_project_costings_admin(self, start_date, end_date, user_ids, x_chronosheets_auth, **kwargs):  # noqa: E501
        """Gets project cost estimations VS actual cost for date range and users.    Requires the &#39;ReportAdmin&#39; permission.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reports_project_costings_admin(start_date, end_date, user_ids, x_chronosheets_auth, async=True)
        >>> result = thread.get()

        :param async bool
        :param datetime start_date: The start date for the date range.  Report data in the response is after this date (required)
        :param datetime end_date: The end date for the date range.  Report data in the response is before this date (required)
        :param str user_ids: A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (required)
        :param str x_chronosheets_auth: The ChronoSheets Auth Token (required)
        :return: CSApiResponseListProjectCostingReportItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.reports_project_costings_admin_with_http_info(start_date, end_date, user_ids, x_chronosheets_auth, **kwargs)  # noqa: E501
        else:
            (data) = self.reports_project_costings_admin_with_http_info(start_date, end_date, user_ids, x_chronosheets_auth, **kwargs)  # noqa: E501
            return data

    def reports_project_costings_admin_with_http_info(self, start_date, end_date, user_ids, x_chronosheets_auth, **kwargs):  # noqa: E501
        """Gets project cost estimations VS actual cost for date range and users.    Requires the &#39;ReportAdmin&#39; permission.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reports_project_costings_admin_with_http_info(start_date, end_date, user_ids, x_chronosheets_auth, async=True)
        >>> result = thread.get()

        :param async bool
        :param datetime start_date: The start date for the date range.  Report data in the response is after this date (required)
        :param datetime end_date: The end date for the date range.  Report data in the response is before this date (required)
        :param str user_ids: A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (required)
        :param str x_chronosheets_auth: The ChronoSheets Auth Token (required)
        :return: CSApiResponseListProjectCostingReportItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'user_ids', 'x_chronosheets_auth']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_project_costings_admin" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_date' is set
        if ('start_date' not in params or
                params['start_date'] is None):
            raise ValueError("Missing the required parameter `start_date` when calling `reports_project_costings_admin`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if ('end_date' not in params or
                params['end_date'] is None):
            raise ValueError("Missing the required parameter `end_date` when calling `reports_project_costings_admin`")  # noqa: E501
        # verify the required parameter 'user_ids' is set
        if ('user_ids' not in params or
                params['user_ids'] is None):
            raise ValueError("Missing the required parameter `user_ids` when calling `reports_project_costings_admin`")  # noqa: E501
        # verify the required parameter 'x_chronosheets_auth' is set
        if ('x_chronosheets_auth' not in params or
                params['x_chronosheets_auth'] is None):
            raise ValueError("Missing the required parameter `x_chronosheets_auth` when calling `reports_project_costings_admin`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('StartDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('EndDate', params['end_date']))  # noqa: E501
        if 'user_ids' in params:
            query_params.append(('UserIds', params['user_ids']))  # noqa: E501

        header_params = {}
        if 'x_chronosheets_auth' in params:
            header_params['x-chronosheets-auth'] = params['x_chronosheets_auth']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/Reports/ProjectCostingsAdmin', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CSApiResponseListProjectCostingReportItem',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reports_user_jobs_over_time(self, start_date, end_date, x_chronosheets_auth, **kwargs):  # noqa: E501
        """Timeseries jobs data for the logged in user.    Requires the &#39;ViewOwnReports&#39; or &#39;SubmitTimesheets&#39;.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reports_user_jobs_over_time(start_date, end_date, x_chronosheets_auth, async=True)
        >>> result = thread.get()

        :param async bool
        :param datetime start_date: The start date for the date range.  Report data in the response is after this date (required)
        :param datetime end_date: The end date for the date range.  Report data in the response is before this date (required)
        :param str x_chronosheets_auth: The ChronoSheets Auth Token (required)
        :return: CSApiResponseListJobSeriesReportItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.reports_user_jobs_over_time_with_http_info(start_date, end_date, x_chronosheets_auth, **kwargs)  # noqa: E501
        else:
            (data) = self.reports_user_jobs_over_time_with_http_info(start_date, end_date, x_chronosheets_auth, **kwargs)  # noqa: E501
            return data

    def reports_user_jobs_over_time_with_http_info(self, start_date, end_date, x_chronosheets_auth, **kwargs):  # noqa: E501
        """Timeseries jobs data for the logged in user.    Requires the &#39;ViewOwnReports&#39; or &#39;SubmitTimesheets&#39;.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reports_user_jobs_over_time_with_http_info(start_date, end_date, x_chronosheets_auth, async=True)
        >>> result = thread.get()

        :param async bool
        :param datetime start_date: The start date for the date range.  Report data in the response is after this date (required)
        :param datetime end_date: The end date for the date range.  Report data in the response is before this date (required)
        :param str x_chronosheets_auth: The ChronoSheets Auth Token (required)
        :return: CSApiResponseListJobSeriesReportItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'x_chronosheets_auth']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_user_jobs_over_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_date' is set
        if ('start_date' not in params or
                params['start_date'] is None):
            raise ValueError("Missing the required parameter `start_date` when calling `reports_user_jobs_over_time`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if ('end_date' not in params or
                params['end_date'] is None):
            raise ValueError("Missing the required parameter `end_date` when calling `reports_user_jobs_over_time`")  # noqa: E501
        # verify the required parameter 'x_chronosheets_auth' is set
        if ('x_chronosheets_auth' not in params or
                params['x_chronosheets_auth'] is None):
            raise ValueError("Missing the required parameter `x_chronosheets_auth` when calling `reports_user_jobs_over_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('StartDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('EndDate', params['end_date']))  # noqa: E501

        header_params = {}
        if 'x_chronosheets_auth' in params:
            header_params['x-chronosheets-auth'] = params['x_chronosheets_auth']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/Reports/UserJobsOverTime', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CSApiResponseListJobSeriesReportItem',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
