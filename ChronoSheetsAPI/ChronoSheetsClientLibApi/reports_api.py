"""
    ChronoSheets API

    <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ChronoSheetsAPI.api_client import ApiClient, Endpoint
from ChronoSheetsAPI.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from ChronoSheetsAPI.model.api_response_combined_reports_data import ApiResponseCombinedReportsData
from ChronoSheetsAPI.model.api_response_for_paginated_list_org_report_timesheet_file_attachment import ApiResponseForPaginatedListOrgReportTimesheetFileAttachment
from ChronoSheetsAPI.model.api_response_for_paginated_list_org_report_transcript import ApiResponseForPaginatedListOrgReportTranscript
from ChronoSheetsAPI.model.api_response_for_paginated_list_org_report_trip import ApiResponseForPaginatedListOrgReportTrip
from ChronoSheetsAPI.model.api_response_for_paginated_list_raw_report_item import ApiResponseForPaginatedListRawReportItem
from ChronoSheetsAPI.model.api_response_list_fleet_summary_report_item import ApiResponseListFleetSummaryReportItem
from ChronoSheetsAPI.model.api_response_list_job_series_report_item import ApiResponseListJobSeriesReportItem
from ChronoSheetsAPI.model.api_response_list_project_costing_report_item import ApiResponseListProjectCostingReportItem
from ChronoSheetsAPI.model.api_response_trip import ApiResponseTrip


class ReportsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __reports_get_all_charts_data_admin(
            self,
            start_date,
            end_date,
            x_chronosheets_auth,
            **kwargs
        ):
            """Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the 'ReportAdmin' permission.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reports_get_all_charts_data_admin(start_date, end_date, x_chronosheets_auth, async_req=True)
            >>> result = thread.get()

            Args:
                start_date (datetime): The start date for the date range.  Report data in the response is after this date
                end_date (datetime): The end date for the date range.  Report data in the response is before this date
                x_chronosheets_auth (str): The ChronoSheets Auth Token

            Keyword Args:
                user_ids (str): A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.. [optional]
                force_only_this_chart (str): A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the 'NotForced' option.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiResponseCombinedReportsData
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['start_date'] = \
                start_date
            kwargs['end_date'] = \
                end_date
            kwargs['x_chronosheets_auth'] = \
                x_chronosheets_auth
            return self.call_with_http_info(**kwargs)

        self.reports_get_all_charts_data_admin = Endpoint(
            settings={
                'response_type': (ApiResponseCombinedReportsData,),
                'auth': [],
                'endpoint_path': '/Reports/GetAllChartsDataAdmin',
                'operation_id': 'reports_get_all_charts_data_admin',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'start_date',
                    'end_date',
                    'x_chronosheets_auth',
                    'user_ids',
                    'force_only_this_chart',
                ],
                'required': [
                    'start_date',
                    'end_date',
                    'x_chronosheets_auth',
                ],
                'nullable': [
                ],
                'enum': [
                    'force_only_this_chart',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('force_only_this_chart',): {

                        "NOTFORCED": "NotForced",
                        "SERIESJOBCODES": "SeriesJobCodes",
                        "SERIESCLIENTS": "SeriesClients",
                        "SERIESPROJECTS": "SeriesProjects",
                        "SERIESTASKS": "SeriesTasks",
                        "TOTALSCLIENTS": "TotalsClients",
                        "TOTALSJOBCODES": "TotalsJobCodes",
                        "TOTALSPROJECTS": "TotalsProjects",
                        "TOTALSTASKS": "TotalsTasks"
                    },
                },
                'openapi_types': {
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'x_chronosheets_auth':
                        (str,),
                    'user_ids':
                        (str,),
                    'force_only_this_chart':
                        (str,),
                },
                'attribute_map': {
                    'start_date': 'StartDate',
                    'end_date': 'EndDate',
                    'x_chronosheets_auth': 'x-chronosheets-auth',
                    'user_ids': 'UserIds',
                    'force_only_this_chart': 'ForceOnlyThisChart',
                },
                'location_map': {
                    'start_date': 'query',
                    'end_date': 'query',
                    'x_chronosheets_auth': 'header',
                    'user_ids': 'query',
                    'force_only_this_chart': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json',
                    'application/xml',
                    'text/xml',
                    'multipart/form-data'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__reports_get_all_charts_data_admin
        )

        def __reports_get_all_charts_data_user(
            self,
            start_date,
            end_date,
            x_chronosheets_auth,
            **kwargs
        ):
            """Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user's own reports.    Requires the 'ViewOwnReports' permission.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reports_get_all_charts_data_user(start_date, end_date, x_chronosheets_auth, async_req=True)
            >>> result = thread.get()

            Args:
                start_date (datetime): The start date for the date range.  Report data in the response is after this date
                end_date (datetime): The end date for the date range.  Report data in the response is before this date
                x_chronosheets_auth (str): The ChronoSheets Auth Token

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiResponseCombinedReportsData
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['start_date'] = \
                start_date
            kwargs['end_date'] = \
                end_date
            kwargs['x_chronosheets_auth'] = \
                x_chronosheets_auth
            return self.call_with_http_info(**kwargs)

        self.reports_get_all_charts_data_user = Endpoint(
            settings={
                'response_type': (ApiResponseCombinedReportsData,),
                'auth': [],
                'endpoint_path': '/Reports/GetAllChartsDataUser',
                'operation_id': 'reports_get_all_charts_data_user',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'start_date',
                    'end_date',
                    'x_chronosheets_auth',
                ],
                'required': [
                    'start_date',
                    'end_date',
                    'x_chronosheets_auth',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'x_chronosheets_auth':
                        (str,),
                },
                'attribute_map': {
                    'start_date': 'StartDate',
                    'end_date': 'EndDate',
                    'x_chronosheets_auth': 'x-chronosheets-auth',
                },
                'location_map': {
                    'start_date': 'query',
                    'end_date': 'query',
                    'x_chronosheets_auth': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json',
                    'application/xml',
                    'text/xml',
                    'multipart/form-data'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__reports_get_all_charts_data_user
        )

        def __reports_get_fleet_summary_admin(
            self,
            start_date,
            end_date,
            x_chronosheets_auth,
            **kwargs
        ):
            """Gets a summary report, which includes total distance travelled and total running costs, for vehicles within your organisation  Requires the 'ReportAdmin' permission.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reports_get_fleet_summary_admin(start_date, end_date, x_chronosheets_auth, async_req=True)
            >>> result = thread.get()

            Args:
                start_date (datetime): The start date for the date range.  Report data in the response is after this date
                end_date (datetime): The end date for the date range.  Report data in the response is before this date
                x_chronosheets_auth (str): The ChronoSheets Auth Token

            Keyword Args:
                user_ids (str): A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiResponseListFleetSummaryReportItem
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['start_date'] = \
                start_date
            kwargs['end_date'] = \
                end_date
            kwargs['x_chronosheets_auth'] = \
                x_chronosheets_auth
            return self.call_with_http_info(**kwargs)

        self.reports_get_fleet_summary_admin = Endpoint(
            settings={
                'response_type': (ApiResponseListFleetSummaryReportItem,),
                'auth': [],
                'endpoint_path': '/Reports/GetFleetSummaryAdmin',
                'operation_id': 'reports_get_fleet_summary_admin',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'start_date',
                    'end_date',
                    'x_chronosheets_auth',
                    'user_ids',
                ],
                'required': [
                    'start_date',
                    'end_date',
                    'x_chronosheets_auth',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'x_chronosheets_auth':
                        (str,),
                    'user_ids':
                        (str,),
                },
                'attribute_map': {
                    'start_date': 'StartDate',
                    'end_date': 'EndDate',
                    'x_chronosheets_auth': 'x-chronosheets-auth',
                    'user_ids': 'UserIds',
                },
                'location_map': {
                    'start_date': 'query',
                    'end_date': 'query',
                    'x_chronosheets_auth': 'header',
                    'user_ids': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json',
                    'application/xml',
                    'text/xml',
                    'multipart/form-data'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__reports_get_fleet_summary_admin
        )

        def __reports_get_org_trip_by_id(
            self,
            trip_id,
            x_chronosheets_auth,
            **kwargs
        ):
            """Get trip by Id, for reporting purposes.    Requires the 'ReportAdmin' permission.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reports_get_org_trip_by_id(trip_id, x_chronosheets_auth, async_req=True)
            >>> result = thread.get()

            Args:
                trip_id (int): The ID of the Trip you want to get
                x_chronosheets_auth (str): The ChronoSheets Auth Token

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiResponseTrip
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['trip_id'] = \
                trip_id
            kwargs['x_chronosheets_auth'] = \
                x_chronosheets_auth
            return self.call_with_http_info(**kwargs)

        self.reports_get_org_trip_by_id = Endpoint(
            settings={
                'response_type': (ApiResponseTrip,),
                'auth': [],
                'endpoint_path': '/Reports/GetOrgTripById',
                'operation_id': 'reports_get_org_trip_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'trip_id',
                    'x_chronosheets_auth',
                ],
                'required': [
                    'trip_id',
                    'x_chronosheets_auth',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'trip_id':
                        (int,),
                    'x_chronosheets_auth':
                        (str,),
                },
                'attribute_map': {
                    'trip_id': 'TripId',
                    'x_chronosheets_auth': 'x-chronosheets-auth',
                },
                'location_map': {
                    'trip_id': 'query',
                    'x_chronosheets_auth': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json',
                    'application/xml',
                    'text/xml',
                    'multipart/form-data'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__reports_get_org_trip_by_id
        )

        def __reports_get_organisation_timesheet_file_attachments(
            self,
            start_date,
            end_date,
            x_chronosheets_auth,
            **kwargs
        ):
            """Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records)  Requires the 'ReportAdmin' permission.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reports_get_organisation_timesheet_file_attachments(start_date, end_date, x_chronosheets_auth, async_req=True)
            >>> result = thread.get()

            Args:
                start_date (datetime): The start date for the date range.  Report data in the response is after this date
                end_date (datetime): The end date for the date range.  Report data in the response is before this date
                x_chronosheets_auth (str): The ChronoSheets Auth Token

            Keyword Args:
                skip (int): Skip this many items. [optional]
                take (int): Take this many items. [optional]
                user_ids (str): A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiResponseForPaginatedListOrgReportTimesheetFileAttachment
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['start_date'] = \
                start_date
            kwargs['end_date'] = \
                end_date
            kwargs['x_chronosheets_auth'] = \
                x_chronosheets_auth
            return self.call_with_http_info(**kwargs)

        self.reports_get_organisation_timesheet_file_attachments = Endpoint(
            settings={
                'response_type': (ApiResponseForPaginatedListOrgReportTimesheetFileAttachment,),
                'auth': [],
                'endpoint_path': '/Reports/GetOrganisationTimesheetFileAttachments',
                'operation_id': 'reports_get_organisation_timesheet_file_attachments',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'start_date',
                    'end_date',
                    'x_chronosheets_auth',
                    'skip',
                    'take',
                    'user_ids',
                ],
                'required': [
                    'start_date',
                    'end_date',
                    'x_chronosheets_auth',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'x_chronosheets_auth':
                        (str,),
                    'skip':
                        (int,),
                    'take':
                        (int,),
                    'user_ids':
                        (str,),
                },
                'attribute_map': {
                    'start_date': 'StartDate',
                    'end_date': 'EndDate',
                    'x_chronosheets_auth': 'x-chronosheets-auth',
                    'skip': 'Skip',
                    'take': 'Take',
                    'user_ids': 'UserIds',
                },
                'location_map': {
                    'start_date': 'query',
                    'end_date': 'query',
                    'x_chronosheets_auth': 'header',
                    'skip': 'query',
                    'take': 'query',
                    'user_ids': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json',
                    'application/xml',
                    'text/xml',
                    'multipart/form-data'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__reports_get_organisation_timesheet_file_attachments
        )

        def __reports_get_organisation_transcripts(
            self,
            start_date,
            end_date,
            x_chronosheets_auth,
            **kwargs
        ):
            """Reports on Organisation transcripts (When an audio file is attached, it will be automatically transcribed, these are the transcriptions)    Requires the 'ReportAdmin' permission.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reports_get_organisation_transcripts(start_date, end_date, x_chronosheets_auth, async_req=True)
            >>> result = thread.get()

            Args:
                start_date (datetime): The start date for the date range.  Report data in the response is after this date
                end_date (datetime): The end date for the date range.  Report data in the response is before this date
                x_chronosheets_auth (str): The ChronoSheets Auth Token

            Keyword Args:
                skip (int): Skip this many items. [optional]
                take (int): Take this many items. [optional]
                user_ids (str): A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.. [optional]
                keywords (str): Search the transcripts by keyword(s). [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiResponseForPaginatedListOrgReportTranscript
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['start_date'] = \
                start_date
            kwargs['end_date'] = \
                end_date
            kwargs['x_chronosheets_auth'] = \
                x_chronosheets_auth
            return self.call_with_http_info(**kwargs)

        self.reports_get_organisation_transcripts = Endpoint(
            settings={
                'response_type': (ApiResponseForPaginatedListOrgReportTranscript,),
                'auth': [],
                'endpoint_path': '/Reports/GetOrganisationTranscripts',
                'operation_id': 'reports_get_organisation_transcripts',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'start_date',
                    'end_date',
                    'x_chronosheets_auth',
                    'skip',
                    'take',
                    'user_ids',
                    'keywords',
                ],
                'required': [
                    'start_date',
                    'end_date',
                    'x_chronosheets_auth',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'x_chronosheets_auth':
                        (str,),
                    'skip':
                        (int,),
                    'take':
                        (int,),
                    'user_ids':
                        (str,),
                    'keywords':
                        (str,),
                },
                'attribute_map': {
                    'start_date': 'StartDate',
                    'end_date': 'EndDate',
                    'x_chronosheets_auth': 'x-chronosheets-auth',
                    'skip': 'Skip',
                    'take': 'Take',
                    'user_ids': 'UserIds',
                    'keywords': 'Keywords',
                },
                'location_map': {
                    'start_date': 'query',
                    'end_date': 'query',
                    'x_chronosheets_auth': 'header',
                    'skip': 'query',
                    'take': 'query',
                    'user_ids': 'query',
                    'keywords': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json',
                    'application/xml',
                    'text/xml',
                    'multipart/form-data'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__reports_get_organisation_transcripts
        )

        def __reports_get_organisation_trips(
            self,
            start_date,
            end_date,
            x_chronosheets_auth,
            **kwargs
        ):
            """Reports on Organisation trips (GPS tracking from whole organisation).    Requires the 'ReportAdmin' permission.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reports_get_organisation_trips(start_date, end_date, x_chronosheets_auth, async_req=True)
            >>> result = thread.get()

            Args:
                start_date (datetime): The start date for the date range.  Report data in the response is after this date
                end_date (datetime): The end date for the date range.  Report data in the response is before this date
                x_chronosheets_auth (str): The ChronoSheets Auth Token

            Keyword Args:
                skip (int): Skip this many items. [optional]
                take (int): Take this many items. [optional]
                user_ids (str): A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiResponseForPaginatedListOrgReportTrip
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['start_date'] = \
                start_date
            kwargs['end_date'] = \
                end_date
            kwargs['x_chronosheets_auth'] = \
                x_chronosheets_auth
            return self.call_with_http_info(**kwargs)

        self.reports_get_organisation_trips = Endpoint(
            settings={
                'response_type': (ApiResponseForPaginatedListOrgReportTrip,),
                'auth': [],
                'endpoint_path': '/Reports/GetOrganisationTrips',
                'operation_id': 'reports_get_organisation_trips',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'start_date',
                    'end_date',
                    'x_chronosheets_auth',
                    'skip',
                    'take',
                    'user_ids',
                ],
                'required': [
                    'start_date',
                    'end_date',
                    'x_chronosheets_auth',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'x_chronosheets_auth':
                        (str,),
                    'skip':
                        (int,),
                    'take':
                        (int,),
                    'user_ids':
                        (str,),
                },
                'attribute_map': {
                    'start_date': 'StartDate',
                    'end_date': 'EndDate',
                    'x_chronosheets_auth': 'x-chronosheets-auth',
                    'skip': 'Skip',
                    'take': 'Take',
                    'user_ids': 'UserIds',
                },
                'location_map': {
                    'start_date': 'query',
                    'end_date': 'query',
                    'x_chronosheets_auth': 'header',
                    'skip': 'query',
                    'take': 'query',
                    'user_ids': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json',
                    'application/xml',
                    'text/xml',
                    'multipart/form-data'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__reports_get_organisation_trips
        )

        def __reports_get_raw_data_admin(
            self,
            start_date,
            end_date,
            x_chronosheets_auth,
            **kwargs
        ):
            """Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the 'ReportAdmin' permission.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reports_get_raw_data_admin(start_date, end_date, x_chronosheets_auth, async_req=True)
            >>> result = thread.get()

            Args:
                start_date (datetime): The start date for the date range.  Report data in the response is after this date
                end_date (datetime): The end date for the date range.  Report data in the response is before this date
                x_chronosheets_auth (str): The ChronoSheets Auth Token

            Keyword Args:
                user_ids (str): A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.. [optional]
                sort (str): Decide which column to sort on. [optional]
                order (str): Decide which direction to sort the column. [optional]
                skip (int): Skip this many rows. [optional]
                take (int): Take this many rows. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiResponseForPaginatedListRawReportItem
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['start_date'] = \
                start_date
            kwargs['end_date'] = \
                end_date
            kwargs['x_chronosheets_auth'] = \
                x_chronosheets_auth
            return self.call_with_http_info(**kwargs)

        self.reports_get_raw_data_admin = Endpoint(
            settings={
                'response_type': (ApiResponseForPaginatedListRawReportItem,),
                'auth': [],
                'endpoint_path': '/Reports/GetRawDataAdmin',
                'operation_id': 'reports_get_raw_data_admin',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'start_date',
                    'end_date',
                    'x_chronosheets_auth',
                    'user_ids',
                    'sort',
                    'order',
                    'skip',
                    'take',
                ],
                'required': [
                    'start_date',
                    'end_date',
                    'x_chronosheets_auth',
                ],
                'nullable': [
                ],
                'enum': [
                    'sort',
                    'order',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('sort',): {

                        "EMAILADDRESS": "EmailAddress",
                        "JOBCODE": "JobCode",
                        "TASKNAME": "TaskName",
                        "CLIENTNAME": "ClientName",
                        "PROJECTNAME": "ProjectName",
                        "STARTDATE": "StartDate",
                        "ENDDATE": "EndDate",
                        "SPANSECONDS": "SpanSeconds",
                        "DESCRIPTION": "Description",
                        "PAYAMOUNT": "PayAmount",
                        "PAYOVERTIMEAMOUNT": "PayOvertimeAmount",
                        "TRIPCOST": "TripCost",
                        "TRIPDISTANCEMETERS": "TripDistanceMeters",
                        "USERNAME": "Username"
                    },
                    ('order',): {

                        "ASCENDING": "Ascending",
                        "DESCENDING": "Descending"
                    },
                },
                'openapi_types': {
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'x_chronosheets_auth':
                        (str,),
                    'user_ids':
                        (str,),
                    'sort':
                        (str,),
                    'order':
                        (str,),
                    'skip':
                        (int,),
                    'take':
                        (int,),
                },
                'attribute_map': {
                    'start_date': 'StartDate',
                    'end_date': 'EndDate',
                    'x_chronosheets_auth': 'x-chronosheets-auth',
                    'user_ids': 'UserIds',
                    'sort': 'Sort',
                    'order': 'Order',
                    'skip': 'Skip',
                    'take': 'Take',
                },
                'location_map': {
                    'start_date': 'query',
                    'end_date': 'query',
                    'x_chronosheets_auth': 'header',
                    'user_ids': 'query',
                    'sort': 'query',
                    'order': 'query',
                    'skip': 'query',
                    'take': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json',
                    'application/xml',
                    'text/xml',
                    'multipart/form-data'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__reports_get_raw_data_admin
        )

        def __reports_project_costings_admin(
            self,
            start_date,
            end_date,
            x_chronosheets_auth,
            **kwargs
        ):
            """Gets project cost estimations VS actual cost for date range and users.    Requires the 'ReportAdmin' permission.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reports_project_costings_admin(start_date, end_date, x_chronosheets_auth, async_req=True)
            >>> result = thread.get()

            Args:
                start_date (datetime): The start date for the date range.  Report data in the response is after this date
                end_date (datetime): The end date for the date range.  Report data in the response is before this date
                x_chronosheets_auth (str): The ChronoSheets Auth Token

            Keyword Args:
                user_ids (str): A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiResponseListProjectCostingReportItem
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['start_date'] = \
                start_date
            kwargs['end_date'] = \
                end_date
            kwargs['x_chronosheets_auth'] = \
                x_chronosheets_auth
            return self.call_with_http_info(**kwargs)

        self.reports_project_costings_admin = Endpoint(
            settings={
                'response_type': (ApiResponseListProjectCostingReportItem,),
                'auth': [],
                'endpoint_path': '/Reports/ProjectCostingsAdmin',
                'operation_id': 'reports_project_costings_admin',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'start_date',
                    'end_date',
                    'x_chronosheets_auth',
                    'user_ids',
                ],
                'required': [
                    'start_date',
                    'end_date',
                    'x_chronosheets_auth',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'x_chronosheets_auth':
                        (str,),
                    'user_ids':
                        (str,),
                },
                'attribute_map': {
                    'start_date': 'StartDate',
                    'end_date': 'EndDate',
                    'x_chronosheets_auth': 'x-chronosheets-auth',
                    'user_ids': 'UserIds',
                },
                'location_map': {
                    'start_date': 'query',
                    'end_date': 'query',
                    'x_chronosheets_auth': 'header',
                    'user_ids': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json',
                    'application/xml',
                    'text/xml',
                    'multipart/form-data'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__reports_project_costings_admin
        )

        def __reports_user_jobs_over_time(
            self,
            start_date,
            end_date,
            x_chronosheets_auth,
            **kwargs
        ):
            """Timeseries jobs data for the logged in user.    Requires the 'ViewOwnReports' or 'SubmitTimesheets'.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reports_user_jobs_over_time(start_date, end_date, x_chronosheets_auth, async_req=True)
            >>> result = thread.get()

            Args:
                start_date (datetime): The start date for the date range.  Report data in the response is after this date
                end_date (datetime): The end date for the date range.  Report data in the response is before this date
                x_chronosheets_auth (str): The ChronoSheets Auth Token

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApiResponseListJobSeriesReportItem
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['start_date'] = \
                start_date
            kwargs['end_date'] = \
                end_date
            kwargs['x_chronosheets_auth'] = \
                x_chronosheets_auth
            return self.call_with_http_info(**kwargs)

        self.reports_user_jobs_over_time = Endpoint(
            settings={
                'response_type': (ApiResponseListJobSeriesReportItem,),
                'auth': [],
                'endpoint_path': '/Reports/UserJobsOverTime',
                'operation_id': 'reports_user_jobs_over_time',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'start_date',
                    'end_date',
                    'x_chronosheets_auth',
                ],
                'required': [
                    'start_date',
                    'end_date',
                    'x_chronosheets_auth',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'x_chronosheets_auth':
                        (str,),
                },
                'attribute_map': {
                    'start_date': 'StartDate',
                    'end_date': 'EndDate',
                    'x_chronosheets_auth': 'x-chronosheets-auth',
                },
                'location_map': {
                    'start_date': 'query',
                    'end_date': 'query',
                    'x_chronosheets_auth': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json',
                    'application/xml',
                    'text/xml',
                    'multipart/form-data'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__reports_user_jobs_over_time
        )
