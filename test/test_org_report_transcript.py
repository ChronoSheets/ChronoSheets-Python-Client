# coding: utf-8

"""
    ChronoSheets API

    <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import ChronoSheetsAPI
from ChronoSheetsAPI.ChronoSheetsClientLibModel.org_report_transcript import OrgReportTranscript  # noqa: E501
from ChronoSheetsAPI.rest import ApiException

class TestOrgReportTranscript(unittest.TestCase):
    """OrgReportTranscript unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test OrgReportTranscript
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = ChronoSheetsAPI.models.org_report_transcript.OrgReportTranscript()  # noqa: E501
        if include_optional :
            return OrgReportTranscript(
                finished_job = True, 
                completed_processing = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                started_processing = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                transcription_id = 56, 
                job_name = '0', 
                contents = '0', 
                media_type = 'Other', 
                transcription_status = 'Saved', 
                username = '0', 
                email_address = '0', 
                first_name = '0', 
                last_name = '0', 
                timesheet_id = 56, 
                document_s3_signed_url = '0', 
                image_large_s3_signed_url = '0', 
                image_medium_s3_signed_url = '0', 
                image_small_s3_signed_url = '0', 
                timesheet_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                timesheet_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                file_attachment_id = 56, 
                user_id = 56, 
                org_id = 56, 
                mobile_platform = 'Unknown', 
                attachment_type = 'Image', 
                notes = '0', 
                non_image_file_path = '0', 
                image_large_file_path = '0', 
                image_medium_file_path = '0', 
                image_small_file_path = '0', 
                original_file_name = '0', 
                latitude = 1.337, 
                longitude = 1.337, 
                date_uploaded = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                date_image_captured = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                storage_allocation_bytes = 56, 
                audio_duration_seconds = 56
            )
        else :
            return OrgReportTranscript(
        )

    def testOrgReportTranscript(self):
        """Test OrgReportTranscript"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
