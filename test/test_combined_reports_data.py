# coding: utf-8

"""
    ChronoSheets API

    <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import ChronoSheetsAPI
from ChronoSheetsAPI.ChronoSheetsClientLibModel.combined_reports_data import CombinedReportsData  # noqa: E501
from ChronoSheetsAPI.rest import ApiException

class TestCombinedReportsData(unittest.TestCase):
    """CombinedReportsData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test CombinedReportsData
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = ChronoSheetsAPI.models.combined_reports_data.CombinedReportsData()  # noqa: E501
        if include_optional :
            return CombinedReportsData(
                series_job_codes = [
                    ChronoSheetsAPI.models.job_series_report_item.JobSeriesReportItem(
                        start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        job_id = 56, 
                        client_id = 56, 
                        client_name = '0', 
                        project_id = 56, 
                        project_name = '0', 
                        span_seconds = 56, 
                        job_code = '0', )
                    ], 
                series_tasks = [
                    ChronoSheetsAPI.models.task_series_report_item.TaskSeriesReportItem(
                        start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        task_id = 56, 
                        task_name = '0', 
                        span_seconds = 56, )
                    ], 
                series_clients = [
                    ChronoSheetsAPI.models.client_series_report_item.ClientSeriesReportItem(
                        start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        client_id = 56, 
                        client_name = '0', 
                        span_seconds = 56, )
                    ], 
                series_projects = [
                    ChronoSheetsAPI.models.project_series_report_item.ProjectSeriesReportItem(
                        start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        project_id = 56, 
                        project_name = '0', 
                        span_seconds = 56, )
                    ], 
                totals_job_codes = [
                    ChronoSheetsAPI.models.job_totals_report_item.JobTotalsReportItem(
                        organisation_id = 56, 
                        job_id = 56, 
                        job_code = '0', 
                        client_id = 56, 
                        client_name = '0', 
                        project_id = 56, 
                        project_name = '0', 
                        span_seconds = 56, )
                    ], 
                totals_tasks = [
                    ChronoSheetsAPI.models.task_totals_report_item.TaskTotalsReportItem(
                        organisation_id = 56, 
                        user_id = 56, 
                        task_id = 56, 
                        task_name = '0', 
                        span_seconds = 56, )
                    ], 
                totals_clients = [
                    ChronoSheetsAPI.models.client_totals_report_item.ClientTotalsReportItem(
                        organisation_id = 56, 
                        user_id = 56, 
                        client_id = 56, 
                        client_name = '0', 
                        span_seconds = 56, )
                    ], 
                totals_projects = [
                    ChronoSheetsAPI.models.project_totals_report_item.ProjectTotalsReportItem(
                        organisation_id = 56, 
                        user_id = 56, 
                        project_id = 56, 
                        project_name = '0', 
                        span_seconds = 56, )
                    ]
            )
        else :
            return CombinedReportsData(
        )

    def testCombinedReportsData(self):
        """Test CombinedReportsData"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
