# coding: utf-8

"""
    The ChronoSheets API

    <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  </p>  <p>      First Steps:       <ol>          <li>Make sure you've <a href='/HomeV2/App/sign-up'>signed up to ChronoSheets</a> to get yourself a user account</li>          <li>Confirm your account by following the link sent to your email address.  This will activate your account</li>          <li>Use your username and password to obtain an Auth Token by using the DoLogin method inside the UserProfile section below.  Use the Auth Token as an argument to the other methods</li>          <li>Try different methods in the API Playground to learn about the API</li>          <li>If you're stuck, try the full getting started guide on the <a href='/Home/ApiDocs'>API Toolkit</a> page.</li>      </ol>  </p>  <p>      Further Steps:       <ul>          <li>Create a mobile app (iOS, Android or Windows) using one of the ChronoSheets Mobile SDKs</li>          <li>Create a custom integration with your app using one of the ChronoSheets API Client Libraries.</li>      </ul>      Read more about the API Toolkit on the <a href='/Home/ApiDocs'>API Toolkit</a> page.  </p></div>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest

import ChronoSheetsAPI
from ChronoSheetsClientLibApi.organisation_groups_api import OrganisationGroupsApi  # noqa: E501
from ChronoSheetsAPI.rest import ApiException


class TestOrganisationGroupsApi(unittest.TestCase):
    """OrganisationGroupsApi unit test stubs"""

    def setUp(self):
        self.api = ChronoSheetsClientLibApi.organisation_groups_api.OrganisationGroupsApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_organisation_groups_create_organisation_group(self):
        """Test case for organisation_groups_create_organisation_group

        Create an organisation group.    Requires the 'ManageOrganisationGroups' permissions.  # noqa: E501
        """
        pass

    def test_organisation_groups_get_organisation_group(self):
        """Test case for organisation_groups_get_organisation_group

        Get a particular organisation group.    Requires the 'ManageOrganisationGroups', 'ManageJobsAndTask', 'ManageClientsAndProjects' or 'ManageOrganisationUsers' permissions.  # noqa: E501
        """
        pass

    def test_organisation_groups_get_organisation_groups(self):
        """Test case for organisation_groups_get_organisation_groups

        Get a collection of organisation groups that are under your organisation.    Requires the 'ManageOrganisationGroups', 'ManageJobsAndTask', 'ManageClientsAndProjects' or 'ManageOrganisationUsers' permissions.  # noqa: E501
        """
        pass

    def test_organisation_groups_get_organisation_groups_for_job(self):
        """Test case for organisation_groups_get_organisation_groups_for_job

        Get org groups for a particular job.    Requires the 'ManageOrganisationGroups', 'ManageJobsAndTask', 'ManageClientsAndProjects' or 'ManageOrganisationUsers' permissions.  # noqa: E501
        """
        pass

    def test_organisation_groups_get_organisation_groups_for_vehicle(self):
        """Test case for organisation_groups_get_organisation_groups_for_vehicle

        Get org groups for a particular vehicle.    Requires the 'ManageOrganisationGroups', 'ManageFleet' or 'ManageOrganisationUsers' permissions.  # noqa: E501
        """
        pass

    def test_organisation_groups_update_organisation_group(self):
        """Test case for organisation_groups_update_organisation_group

        Update an organisation group.    Requires the 'ManageOrganisationGroups' permissions.  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
